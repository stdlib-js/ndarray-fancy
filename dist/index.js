"use strict";var h=function(n,r){return function(){return r||n((r={exports:{}}).exports,r),r.exports}};var w=h(function(Qr,_){"use strict";var Q=require("@stdlib/string-base-replace");function G(n){return Q(n,/^invalid argument/,"invalid operation")}_.exports=G});var m=h(function(Gr,N){"use strict";var z=require("@stdlib/assert-is-range-error"),W=require("@stdlib/assert-is-type-error"),Y=require("@stdlib/assert-is-syntax-error");function $(n){return z(n)?RangeError:W(n)?TypeError:Y(n)?SyntaxError:Error}N.exports=$});var I=h(function(zr,L){"use strict";var k=require("@stdlib/utils-properties-in"),H=require("@stdlib/array-base-assert-contains").factory,J=require("@stdlib/ndarray-ctor"),K=require("@stdlib/ndarray-defaults"),X=H(k(new J("generic",[0],[],[0],0,K.get("order"))));L.exports=X});var S=h(function(Wr,V){"use strict";var Z=/^-?[0-9]+$/;V.exports=Z});var g=h(function(Yr,A){"use strict";var rr=/:/;A.exports=rr});var C=h(function($r,U){"use strict";var er=require("@stdlib/assert-is-function"),ir=require("@stdlib/string-base-trim"),nr=require("@stdlib/string-base-replace"),R=require("@stdlib/slice-multi"),ar=require("@stdlib/slice-base-str2multislice"),sr=require("@stdlib/slice-base-seq2multislice"),tr=require("@stdlib/slice-base-str2slice"),or=require("@stdlib/ndarray-base-slice"),f=require("@stdlib/string-format"),ur=w(),lr=m(),cr=I(),vr=S(),Er=g();function hr(n,r,c){var u,o,s,a,l,i;if(cr(r))return u=n[r],er(u)?e:u;if(s=ir(r),a=s[0],a==="S"){if(i=tr(r),i===null)throw new Error(f("invalid operation. Unsupported slice operation. Value: `%s`.",r));i=new R(i)}else if(a==="M"){if(i=ar(s),i===null)throw new Error(f("invalid operation. Unsupported slice operation. Value: `%s`.",r))}else if(vr.test(s))i=parseInt(s,10),i=new R(i);else if(Er.test(s)){if(o=n.shape,i=sr(s,o,!0),i.code)throw i.code==="ERR_SLICE_INVALID_INCREMENT"?new Error(f("invalid operation. A subsequence increment must be a non-zero integer. Value: `%s`.",r)):i.code==="ERR_SLICE_INVALID_ELLIPSIS"?new Error(f("invalid operation. A subsequence may only include a single ellipsis. Value: `%s`.",r)):i.code==="ERR_SLICE_INVALID_SUBSEQUENCE"?new Error(f("invalid operation. Unsupported slice operation. Value: `%s`.",r)):new RangeError(f("invalid operation. Number of slice dimensions does not match the number of array dimensions. Array shape: (%s). Slice dimensions: %u.",o.join(","),nr(s,/\.\.\.,/,"").split(",").length))}else if(s.length===0||s==="...")i=new R;else throw new Error(f("invalid operation. Unsupported slice operation. Value: `%s`.",r));try{return or(c,i,!0)}catch(v){throw l=lr(v),new l(ur(v.message))}function e(){var v,t;for(v=[],t=0;t<arguments.length;t++)v.push(arguments[t]);return u.apply(this===c?n:this,v)}}U.exports=hr});var M=h(function(kr,y){"use strict";var dr=require("@stdlib/assert-is-function"),fr=require("@stdlib/string-base-trim"),pr=require("@stdlib/string-base-replace"),b=require("@stdlib/slice-multi"),qr=require("@stdlib/slice-base-str2slice"),wr=require("@stdlib/slice-base-str2multislice"),x=require("@stdlib/slice-base-seq2multislice"),mr=require("@stdlib/ndarray-base-slice"),d=require("@stdlib/string-format"),Ir=w(),Sr=m(),gr=I(),Rr=S();function _r(n,r,c){var u,o,s,a,l,i,e;if(gr(r))return s=n[r],dr(s)?v:s;if(a=fr(r),u=!1,l=a[0],l==="S"){if(e=qr(r),e===null)throw new Error(d("invalid operation. Unsupported slice operation. Value: `%s`.",r));e=new b(e)}else if(l==="M"){if(e=wr(a),e===null)throw new Error(d("invalid operation. Unsupported slice operation. Value: `%s`.",r))}else if(Rr.test(a))e=parseInt(a,10),e=new b(e);else if(a.length>0){if(o=n.shape,e=x(a,o,!0),e.code){if(e.code==="ERR_SLICE_INVALID_INCREMENT")throw new Error(d("invalid operation. A subsequence increment must be a non-zero integer. Value: `%s`.",r));if(e.code==="ERR_SLICE_INVALID_ELLIPSIS")throw new Error(d("invalid operation. A subsequence may only include a single ellipsis. Value: `%s`.",r));if(e.code==="ERR_SLICE_INVALID_SUBSEQUENCE")throw new Error(d("invalid operation. Unsupported slice operation. Value: `%s`.",r));if(e.code==="ERR_SLICE_TOO_MANY_DIMENSIONS")throw new RangeError(d("invalid operation. Number of slice dimensions does not match the number of array dimensions. Array shape: (%s). Slice dimensions: %u.",n.shape.join(","),pr(a,/\.\.\.,/,"").split(",").length));if(e.code==="ERR_SLICE_OUT_OF_BOUNDS"){if(u)throw new RangeError(d("invalid operation. Slice exceeds array bounds. Array shape: (%s).",o.join(",")));e=x(a,o,!1)}}}else throw new RangeError(d("invalid operation. Number of slice dimensions does not match the number of array dimensions. Array shape: (%s). Slice dimensions: %u.",n.shape.join(","),0));try{return mr(c,e,u)}catch(t){throw i=Sr(t),new i(Ir(t.message))}function v(){var t,E;for(t=[],E=0;E<arguments.length;E++)t.push(arguments[E]);return s.apply(this===c?n:this,t)}}y.exports=_r});var O=h(function(Hr,T){"use strict";var Nr=require("@stdlib/assert-is-function"),Lr=require("@stdlib/string-base-trim"),Vr=require("@stdlib/slice-base-str2multislice"),D=require("@stdlib/slice-base-seq2multislice"),Ar=require("@stdlib/slice-base-sargs2multislice"),Ur=require("@stdlib/ndarray-base-slice"),p=require("@stdlib/string-format"),Cr=w(),br=m(),xr=I(),yr=g();function Mr(n,r,c){var u,o,s,a,l,i,e;if(xr(r))return s=n[r],Nr(s)?v:s;if(a=Lr(r),u=!1,l=a[0],l==="M"){if(e=Vr(a),e===null)throw new Error(p("invalid operation. Unsupported slice operation. Value: `%s`.",r))}else if(yr.test(a)||a==="..."){if(o=n.shape,e=D(a,o,!0),e.code){if(e.code==="ERR_SLICE_INVALID_INCREMENT")throw new Error(p("invalid operation. A subsequence increment must be a non-zero integer. Value: `%s`.",r));if(e.code==="ERR_SLICE_INVALID_ELLIPSIS")throw new Error(p("invalid operation. A subsequence may only include a single ellipsis. Value: `%s`.",r));if(e.code==="ERR_SLICE_INVALID_SUBSEQUENCE")throw new Error(p("invalid operation. Unsupported slice operation. Value: `%s`.",r));if(e.code==="ERR_SLICE_OUT_OF_BOUNDS"){if(u)throw new RangeError(p("invalid operation. Slice exceeds array bounds. Array shape: (%s).",o.join(",")));e=D(a,o,!1)}}}else if(e=Ar(a),e===null)throw new Error(p("invalid operation. Unsupported slice operation. Value: `%s`.",r));try{return Ur(c,e,u)}catch(t){throw i=br(t),new i(Cr(t.message))}function v(){var t,E;for(t=[],E=0;E<arguments.length;E++)t.push(arguments[E]);return s.apply(this===c?n:this,t)}}T.exports=Mr});var j=h(function(Jr,F){"use strict";var Dr=require("@stdlib/utils-define-nonenumerable-read-only-property"),B=require("@stdlib/ndarray-ctor"),Tr=require("@stdlib/utils-inherit"),P=require("@stdlib/proxy-ctor"),Or=C(),Pr=M(),Br=O();function q(n,r,c,u,o,s,a){var l,i,e;return i=arguments.length,this instanceof q?(B.call(this,n,r,c,u,o,s,i<7?{}:a),P?(e=c.length,l={},e===0?l.get=Or:e===1?l.get=Pr:l.get=Br,new P(this,l)):(console.warn("WARNING: Proxy objects are not supported in the current environment. Some `FancyArray` functionality may not be available."),this)):i<7?new q(n,r,c,u,o,s):new q(n,r,c,u,o,s,a)}Tr(q,B);Dr(q,"name","ndarray");F.exports=q});var Fr=j();module.exports=Fr;
/**
* @license Apache-2.0
*
* Copyright (c) 2023 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/
//# sourceMappingURL=index.js.map
