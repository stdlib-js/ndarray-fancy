"use strict";var h=function(r,e){return function(){return e||r((e={exports:{}}).exports,e),e.exports}};var R=h(function(ce,x){"use strict";var ir=require("@stdlib/utils-properties-in"),nr=require("@stdlib/array-base-assert-contains").factory,ar=require("@stdlib/ndarray-ctor"),sr=require("@stdlib/ndarray-defaults"),or=nr(ir(new ar("generic",[0],[],[0],0,sr.get("order"))));x.exports=or});var m=h(function(he,V){"use strict";function tr(){return{readonly:!0}}V.exports=tr});var g=h(function(fe,U){"use strict";var ur=/^-?[0-9]+$/;U.exports=ur});var L=h(function(pe,j){"use strict";var lr=require("@stdlib/assert-is-function"),vr=require("@stdlib/string-base-trim"),dr=require("@stdlib/slice-base-str2multislice"),y=require("@stdlib/string-format"),cr=R(),hr=m(),fr=g();function pr(r,e,t){var l,n,i,s,a,o;if(cr(e))return n=r[e],lr(n)?d:n;if(i=vr(e),l=r.dtype,a=r.shape,s=i[0],s==="M"){if(o=dr(i),o===null)throw new Error(y("invalid operation. Unsupported slice operation. Value: `%s`.",e));if(o.ndims!==a.length)throw new RangeError(y("invalid operation. Number of array dimensions does not match the number of slice dimensions. Array shape: (%s). Slice dimensions: %u.",a.join(","),o.ndims))}else if(i.length!==0)throw s==="S"||fr.test(i)?new RangeError(y("invalid operation. Number of array dimensions does not match the number of slice dimensions. Array shape: (%s). Slice dimensions: %u.",a.join(","),1)):new Error(y("invalid operation. Unsupported slice operation. Value: `%s`.",e));return new t.constructor(l,r.data,a,r.strides,r.offset,r.order,hr());function d(){var c,v;for(c=[],v=0;v<arguments.length;v++)c.push(arguments[v]);return n.apply(this===t?r:this,c)}}j.exports=pr});var q=h(function(me,C){"use strict";var mr=require("@stdlib/ndarray-base-buffer"),wr=require("@stdlib/array-base-zeros"),qr=m();function Er(r,e,t,l){var n,i;return i=t.length,i===0?n=[0]:n=wr(i),new r(e,mr(e,0),t,n,0,l,qr())}C.exports=Er});var F=h(function(we,D){"use strict";var Sr=require("@stdlib/ndarray-base-vind2bind"),Rr=require("@stdlib/slice-base-length"),yr=q(),br=m();function _r(r,e,t,l,n,i,s,a){var o=a.start;return o===a.stop?yr(r,e,[0],s):(i=Sr(l,n,i,s,o,"throw"),l=[Rr(a)],n=[n[0]*a.step],new r(e,t,l,n,i,s,br()))}D.exports=_r});var O=h(function(qe,M){"use strict";var gr=require("@stdlib/assert-is-function"),Ir=require("@stdlib/string-base-trim"),Ar=require("@stdlib/slice-base-seq2slice"),Nr=require("@stdlib/slice-base-str2slice"),xr=require("@stdlib/slice-base-str2multislice"),Vr=require("@stdlib/slice-base-normalize-slice"),Ur=require("@stdlib/slice-base-normalize-multi-slice"),jr=require("@stdlib/ndarray-base-vind2bind"),f=require("@stdlib/string-format"),Lr=R(),Cr=m(),Dr=g(),I=F(),E=q();function Fr(r,e,t){var l,n,i,s,a,o,d,c,v,p,u;if(Lr(e))return d=r[e],gr(d)?er:d;if(v=Ir(e),s=r.dtype,a=r.shape,l=r.strides,n=r.offset,o=r.order,i=!1,p=v[0],p==="S"){if(u=Nr(e),u===null)throw new Error(f("invalid operation. Unsupported slice operation. Value: `%s`.",e));if(u=Vr(u,a[0],!0),u.code){if(i)throw new RangeError(f("invalid operation. Slice exceeds array bounds. Array shape: (%s).",a.join(",")));return E(t.constructor,s,[0],o)}return I(t.constructor,s,r.data,a,l,n,o,u)}if(p==="M"){if(u=xr(v),u===null)throw new Error(f("invalid operation. Unsupported slice operation. Value: `%s`.",e));if(u.ndims!==a.length)throw new RangeError(f("invalid operation. Number of array dimensions does not match the number of slice dimensions. Array shape: (%s). Slice dimensions: %u.",a.join(","),u.ndims));if(u=Ur(u,a,!0),u.code){if(i)throw new RangeError(f("invalid operation. Slice exceeds array bounds. Array shape: (%s).",a.join(",")));return E(t.constructor,s,[0],o)}return I(t.constructor,s,r.data,a,l,n,o,u.data[0])}if(Dr.test(v)){if(u=parseInt(v,10),u<0){if(u=a[0]+u,u<0){if(i)throw new RangeError(f("invalid operation. Slice exceeds array bounds. Array shape: (%s).",a.join(",")));return E(t.constructor,s,[],o)}}else if(u>=a[0]){if(i)throw new RangeError(f("invalid operation. Slice exceeds array bounds. Array shape: (%s).",a.join(",")));return E(t.constructor,s,[],o)}return n=jr(a,l,n,o,u,"throw"),new t.constructor(s,r.data,[],[0],n,o,Cr())}if(c=v.split(/\s*,\s*/),c.length>1)throw new RangeError(f("invalid operation. Number of array dimensions does not match the number of slice dimensions. Array shape: (%s). Slice dimensions: %u.",a.join(","),c.length));if(v=c[0],v.length===0)throw new RangeError(f("invalid operation. Number of array dimensions does not match the number of slice dimensions. Array shape: (%s). Slice dimensions: %u.",a.join(","),0));if(u=Ar(v,a[0],!0),u.code){if(u.code==="ERR_SLICE_OUT_OF_BOUNDS"){if(i)throw new RangeError(f("invalid operation. Slice exceeds array bounds. Array shape: (%s).",a.join(",")));return E(t.constructor,s,[],o)}if(u.code==="ERR_SLICE_INVALID_INCREMENT")throw new Error(f("invalid operation. A subsequence increment must be a non-zero integer. Value: `%s`.",e));if(u.code==="ERR_SLICE_INVALID_SUBSEQUENCE")throw new Error(f("invalid operation. Unsupported slice operation. Value: `%s`.",e))}return I(t.constructor,s,r.data,a,l,n,o,u);function er(){var _,S;for(_=[],S=0;S<arguments.length;S++)_.push(arguments[S]);return d.apply(this===t?r:this,_)}}M.exports=Fr});var T=h(function(Ee,P){"use strict";var Mr=/:/;P.exports=Mr});var B=h(function(Se,z){"use strict";var Or=require("@stdlib/ndarray-base-sub2ind");function Pr(r,e,t,l){var n,i,s;for(n=r.data,i=[e,t,l],s=0;s<n.length;s++)i.push(n[s].start);return i.push("throw"),Or.apply(null,i)}z.exports=Pr});var Q=h(function(Re,G){"use strict";function Tr(r,e,t){var l,n,i,s;for(l=r.data,n=[],i=0;i<t.length;i++)s=t[i],n.push(e[s]*l[s].step);return n}G.exports=Tr});var H=h(function(ye,$){"use strict";var zr=require("@stdlib/slice-base-normalize-multi-slice"),Br=require("@stdlib/slice-base-nonreduced-dimensions"),Gr=require("@stdlib/slice-base-shape"),k=require("@stdlib/array-base-take"),Qr=require("@stdlib/ndarray-base-vind2bind"),kr=require("@stdlib/ndarray-base-numel"),A=require("@stdlib/string-format"),Wr=B(),$r=Q(),W=m(),Hr=q();function Jr(r,e,t,l){var n,i,s,a,o,d,c,v,p,u;if(l===null)throw new Error(A("invalid operation. Unsupported slice operation. Value: `%s`.",e));if(a=r.dtype,o=r.shape,n=r.strides,i=r.offset,d=r.order,s=!1,l.ndims!==o.length)throw new RangeError(A("invalid operation. Number of array dimensions does not match the number of slice dimensions. Array shape: (%s). Slice dimensions: %u.",o.join(","),l.ndims));if(u=zr(l,o,!0),u.code&&s)throw new RangeError(A("invalid operation. Slice exceeds array bounds. Array shape: (%s).",o.join(",")));return v=t.constructor,p=Gr(u),c=Br(l),kr(p)===0?Hr(v,a,k(p,c),d):(i=Qr(o,n,i,d,Wr(u,o,n,0),"throw"),p=k(p,c),p.length===0?new v(a,r.data,[],[0],i,d,W()):(n=$r(u,n,c),new v(a,r.data,p,n,i,d,W())))}$.exports=Jr});var K=h(function(be,J){"use strict";var Kr=require("@stdlib/assert-is-function"),Xr=require("@stdlib/string-base-trim"),Yr=require("@stdlib/slice-base-str2multislice"),Zr=require("@stdlib/slice-base-seq2multislice"),re=require("@stdlib/slice-base-sargs2multislice"),b=require("@stdlib/string-format"),ee=R(),ie=T(),N=H(),ne=q();function ae(r,e,t){var l,n,i,s,a,o;if(ee(e))return i=r[e],Kr(i)?d:i;if(s=Xr(e),l=!1,a=s[0],a==="M")return N(r,e,t,Yr(s));if(ie.test(s)){if(n=r.shape,o=Zr(s,n,!0),o.code){if(o.code==="ERR_SLICE_OUT_OF_BOUNDS"){if(l)throw new RangeError(b("invalid operation. Slice exceeds array bounds. Array shape: (%s).",n.join(",")));return ne(t.constructor,r.dtype,[],r.order)}if(o.code==="ERR_SLICE_INVALID_INCREMENT")throw new Error(b("invalid operation. A subsequence increment must be a non-zero integer. Value: `%s`.",e));if(o.code==="ERR_SLICE_INVALID_ELLIPSIS")throw new Error(b("invalid operation. A subsequence may only include a single ellipsis. Value: `%s`.",e));if(o.code==="ERR_SLICE_INVALID_SUBSEQUENCE")throw new Error(b("invalid operation. Unsupported slice operation. Value: `%s`.",e))}return N(r,e,t,o)}return N(r,"["+e+"]",t,re(s));function d(){var c,v;for(c=[],v=0;v<arguments.length;v++)c.push(arguments[v]);return i.apply(this===t?r:this,c)}}J.exports=ae});var rr=h(function(_e,Z){"use strict";var se=require("@stdlib/utils-define-nonenumerable-read-only-property"),Y=require("@stdlib/ndarray-ctor"),oe=require("@stdlib/utils-inherit"),X=require("@stdlib/proxy-ctor"),te=L(),ue=O(),le=K();function w(r,e,t,l,n,i,s){var a,o,d;return o=arguments.length,this instanceof w?(Y.call(this,r,e,t,l,n,i,o<7?{}:s),X?(d=t.length,a={},d===0?a.get=te:d===1?a.get=ue:a.get=le,new X(this,a)):(console.warn("WARNING: Proxy objects are not supported in the current environment. Some `FancyArray` functionality may not be available."),this)):o<7?new w(r,e,t,l,n,i):new w(r,e,t,l,n,i,s)}oe(w,Y);se(w,"name","ndarray");Z.exports=w});var ve=rr();module.exports=ve;
/**
* @license Apache-2.0
*
* Copyright (c) 2023 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/
//# sourceMappingURL=index.js.map
