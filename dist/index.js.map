{
  "version": 3,
  "sources": ["../lib/re_integer.js", "../lib/re_subseq.js", "../lib/prop2slice.0d.js", "../lib/prop2slice.1d.js", "../lib/prop2slice.nd.js", "../lib/has_property.js", "../lib/get_value.js", "../lib/error_message.js", "../lib/get_slice.js", "../lib/get.js", "../lib/set_value.js", "../lib/set_slice.js", "../lib/set.js", "../lib/main.js", "../lib/index.js"],
  "sourcesContent": ["/**\n* @license Apache-2.0\n*\n* Copyright (c) 2023 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MAIN //\n\n/**\n* Regular expression for testing whether a string is an integer string.\n*\n* @private\n* @name RE_INTEGER\n* @type {RegExp}\n*\n* @example\n* var bool = RE_INTEGER.test( '10' );\n* // returns true\n*\n* @example\n* var bool = RE_INTEGER.test( '-1' );\n* // returns true\n*\n* @example\n* var bool = RE_INTEGER.test( '0:10:2' );\n* // returns false\n*/\nvar RE_INTEGER = /^-?[0-9]+$/;\n\n\n// EXPORTS //\n\nmodule.exports = RE_INTEGER;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2023 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MAIN //\n\n/**\n* Regular expression for testing whether a string is a subsequence string.\n*\n* @private\n* @name RE_SUBSEQ\n* @type {RegExp}\n*\n* @example\n* var bool = RE_SUBSEQ.test( '0:10:2' );\n* // returns true\n*\n* @example\n* var bool = RE_SUBSEQ.test( '0' );\n* // returns false\n*\n* @example\n* var bool = RE_SUBSEQ.test( 'Slice(0,10,2)' );\n* // returns false\n*/\nvar RE_SUBSEQ = /:/;\n\n\n// EXPORTS //\n\nmodule.exports = RE_SUBSEQ;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2023 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar trim = require( '@stdlib/string-base-trim' );\nvar replace = require( '@stdlib/string-base-replace' );\nvar MultiSlice = require( '@stdlib/slice-multi' );\nvar str2multislice = require( '@stdlib/slice-base-str2multislice' );\nvar seq2multislice = require( '@stdlib/slice-base-seq2multislice' );\nvar str2slice = require( '@stdlib/slice-base-str2slice' );\nvar format = require( '@stdlib/string-format' );\nvar RE_INTEGER = require( './re_integer.js' );\nvar RE_SUBSEQ = require( './re_subseq.js' );\n\n\n// MAIN //\n\n/**\n* Converts a zero-dimensional ndarray indexing expression to a slice.\n*\n* @private\n* @param {Object} target - target object\n* @param {string} property - property name\n* @param {boolean} strict - boolean indicating whether to enforce strict bounds checking\n* @throws {Error} invalid slice operation\n* @throws {RangeError} number of slice dimensions must match the number of array dimensions\n* @returns {MultiSlice} multi-slice object\n*/\nfunction prop2slice( target, property ) {\n\tvar shape;\n\tvar prop;\n\tvar ch;\n\tvar s;\n\n\tprop = trim( property );\n\n\t// Retrieve the first character in order to to detect how a slice operation was specified:\n\tch = prop[ 0 ];\n\n\t// Case: slice\n\tif ( ch === 'S' ) {\n\t\t// Convert the string to a slice object:\n\t\ts = str2slice( prop );\n\t\tif ( s === null ) {\n\t\t\tthrow new Error( format( 'invalid operation. Unsupported slice operation. Value: `%s`.', property ) );\n\t\t}\n\t\t// Create a multi-slice:\n\t\ts = new MultiSlice( s );\n\t}\n\t// Case: multi-slice\n\telse if ( ch === 'M' ) {\n\t\t// Convert the string to a slice object:\n\t\ts = str2multislice( prop );\n\t\tif ( s === null ) {\n\t\t\tthrow new Error( format( 'invalid operation. Unsupported slice operation. Value: `%s`.', property ) );\n\t\t}\n\t}\n\t// Case: integer\n\telse if ( RE_INTEGER.test( prop ) ) {\n\t\t// Convert the string to a numeric value:\n\t\ts = parseInt( prop, 10 );\n\n\t\t// Create a multi-slice:\n\t\ts = new MultiSlice( s );\n\t}\n\t// Case: subsequence string (e.g., ':10,1,::-1,:,-5,2::3')\n\telse if ( RE_SUBSEQ.test( prop ) ) {\n\t\tshape = target.shape;\n\t\ts = seq2multislice( prop, shape, true );\n\t\tif ( s.code ) {\n\t\t\tif ( s.code === 'ERR_SLICE_INVALID_INCREMENT' ) {\n\t\t\t\tthrow new Error( format( 'invalid operation. A subsequence increment must be a non-zero integer. Value: `%s`.', property ) );\n\t\t\t}\n\t\t\tif ( s.code === 'ERR_SLICE_INVALID_ELLIPSIS' ) {\n\t\t\t\tthrow new Error( format( 'invalid operation. A subsequence may only include a single ellipsis. Value: `%s`.', property ) );\n\t\t\t}\n\t\t\tif ( s.code === 'ERR_SLICE_INVALID_SUBSEQUENCE' ) {\n\t\t\t\tthrow new Error( format( 'invalid operation. Unsupported slice operation. Value: `%s`.', property ) );\n\t\t\t}\n\t\t\t// s.code === 'ERR_SLICE_TOO_MANY_DIMENSIONS'\n\t\t\tthrow new RangeError( format( 'invalid operation. Number of slice dimensions does not match the number of array dimensions. Array shape: (%s). Slice dimensions: %u.', shape.join( ',' ), replace( prop, /\\.\\.\\.,/, '' ).split( ',' ).length ) );\n\t\t}\n\t}\n\t// Case: empty string or ellipsis\n\telse if ( prop.length === 0 || prop === '...' ) {\n\t\ts = new MultiSlice();\n\t}\n\t// Case: non-empty string\n\telse { // FIXME: need to gracefully handle non-existent properties\n\t\tthrow new Error( format( 'invalid operation. Unsupported slice operation. Value: `%s`.', property ) );\n\t}\n\treturn s;\n}\n\n\n// EXPORTS //\n\nmodule.exports = prop2slice;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2023 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar trim = require( '@stdlib/string-base-trim' );\nvar replace = require( '@stdlib/string-base-replace' );\nvar MultiSlice = require( '@stdlib/slice-multi' );\nvar str2multislice = require( '@stdlib/slice-base-str2multislice' );\nvar seq2multislice = require( '@stdlib/slice-base-seq2multislice' );\nvar str2slice = require( '@stdlib/slice-base-str2slice' );\nvar format = require( '@stdlib/string-format' );\nvar RE_INTEGER = require( './re_integer.js' );\n\n\n// MAIN //\n\n/**\n* Converts a one-dimensional ndarray indexing expression to a slice.\n*\n* @private\n* @param {Object} target - target object\n* @param {string} property - property name\n* @param {boolean} strict - boolean indicating whether to enforce strict bounds checking\n* @throws {Error} invalid slice operation\n* @throws {RangeError} number of slice dimensions must match the number of array dimensions\n* @returns {MultiSlice} multi-slice object\n*/\nfunction prop2slice( target, property, strict ) {\n\tvar shape;\n\tvar prop;\n\tvar ch;\n\tvar s;\n\n\tprop = trim( property );\n\n\t// Retrieve the first character in order to to detect how a slice operation was specified:\n\tch = prop[ 0 ];\n\n\t// Case: slice\n\tif ( ch === 'S' ) {\n\t\t// Convert the string to a slice object:\n\t\ts = str2slice( prop );\n\t\tif ( s === null ) {\n\t\t\tthrow new Error( format( 'invalid operation. Unsupported slice operation. Value: `%s`.', property ) );\n\t\t}\n\t\t// Create a multi-slice:\n\t\ts = new MultiSlice( s );\n\t}\n\t// Case: multi-slice\n\telse if ( ch === 'M' ) {\n\t\t// Convert the string to a slice object:\n\t\ts = str2multislice( prop );\n\t\tif ( s === null ) {\n\t\t\tthrow new Error( format( 'invalid operation. Unsupported slice operation. Value: `%s`.', property ) );\n\t\t}\n\t}\n\t// Case: integer\n\telse if ( RE_INTEGER.test( prop ) ) {\n\t\t// Convert the string to a numeric value:\n\t\ts = parseInt( prop, 10 );\n\n\t\t// Create a multi-slice:\n\t\ts = new MultiSlice( s );\n\t}\n\t// Case: subsequence string\n\telse if ( prop.length > 0 ) { // FIXME: need to gracefully handle non-existent properties\n\t\tshape = target.shape;\n\t\ts = seq2multislice( prop, shape, true );\n\t\tif ( s.code ) {\n\t\t\tif ( s.code === 'ERR_SLICE_INVALID_INCREMENT' ) {\n\t\t\t\tthrow new Error( format( 'invalid operation. A subsequence increment must be a non-zero integer. Value: `%s`.', property ) );\n\t\t\t}\n\t\t\tif ( s.code === 'ERR_SLICE_INVALID_ELLIPSIS' ) {\n\t\t\t\tthrow new Error( format( 'invalid operation. A subsequence may only include a single ellipsis. Value: `%s`.', property ) );\n\t\t\t}\n\t\t\tif ( s.code === 'ERR_SLICE_INVALID_SUBSEQUENCE' ) {\n\t\t\t\tthrow new Error( format( 'invalid operation. Unsupported slice operation. Value: `%s`.', property ) );\n\t\t\t}\n\t\t\tif ( s.code === 'ERR_SLICE_TOO_MANY_DIMENSIONS' ) {\n\t\t\t\tthrow new RangeError( format( 'invalid operation. Number of slice dimensions does not match the number of array dimensions. Array shape: (%s). Slice dimensions: %u.', target.shape.join( ',' ), replace( prop, /\\.\\.\\.,/, '' ).split( ',' ).length ) );\n\t\t\t}\n\t\t\t// NOTE: the following error check must come last due to fall-through when in non-strict mode...\n\t\t\tif ( s.code === 'ERR_SLICE_OUT_OF_BOUNDS' ) {\n\t\t\t\tif ( strict ) {\n\t\t\t\t\tthrow new RangeError( format( 'invalid operation. Slice exceeds array bounds. Array shape: (%s).', shape.join( ',' ) ) );\n\t\t\t\t}\n\t\t\t\t// Repeat parsing, this time allowing for out-of-bounds slices:\n\t\t\t\ts = seq2multislice( prop, shape, false );\n\t\t\t}\n\t\t}\n\t}\n\t// Case: empty string\n\telse {\n\t\tthrow new RangeError( format( 'invalid operation. Number of slice dimensions does not match the number of array dimensions. Array shape: (%s). Slice dimensions: %u.', target.shape.join( ',' ), 0 ) );\n\t}\n\treturn s;\n}\n\n\n// EXPORTS //\n\nmodule.exports = prop2slice;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2023 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar trim = require( '@stdlib/string-base-trim' );\nvar str2multislice = require( '@stdlib/slice-base-str2multislice' );\nvar seq2multislice = require( '@stdlib/slice-base-seq2multislice' );\nvar sargs2multislice = require( '@stdlib/slice-base-sargs2multislice' );\nvar format = require( '@stdlib/string-format' );\nvar RE_SUBSEQ = require( './re_subseq.js' );\n\n\n// MAIN //\n\n/**\n* Converts an n-dimensional ndarray indexing expression to a slice.\n*\n* @private\n* @param {Object} target - target object\n* @param {string} property - property name\n* @param {boolean} strict - boolean indicating whether to enforce strict bounds checking\n* @throws {Error} invalid slice operation\n* @throws {RangeError} number of slice dimensions must match the number of array dimensions\n* @returns {MultiSlice} multi-slice object\n*/\nfunction prop2slice( target, property, strict ) {\n\tvar shape;\n\tvar prop;\n\tvar ch;\n\tvar s;\n\n\tprop = trim( property );\n\n\t// Retrieve the first character in order to to detect how a slice operation was specified:\n\tch = prop[ 0 ];\n\n\t// Case: multi-slice (e.g., 'MultiSlice(Slice(0,10,2),null,2,Slice(10,5,-1))')\n\tif ( ch === 'M' ) {\n\t\ts = str2multislice( prop );\n\t\tif ( s === null ) {\n\t\t\tthrow new Error( format( 'invalid operation. Unsupported slice operation. Value: `%s`.', property ) );\n\t\t}\n\t}\n\t// Case: subsequence string (e.g., '...' or ':10,1,::-1,:,-5,2::3')\n\telse if ( RE_SUBSEQ.test( prop ) || prop === '...' ) {\n\t\tshape = target.shape;\n\t\ts = seq2multislice( prop, shape, true );\n\t\tif ( s.code ) {\n\t\t\tif ( s.code === 'ERR_SLICE_INVALID_INCREMENT' ) {\n\t\t\t\tthrow new Error( format( 'invalid operation. A subsequence increment must be a non-zero integer. Value: `%s`.', property ) );\n\t\t\t}\n\t\t\tif ( s.code === 'ERR_SLICE_INVALID_ELLIPSIS' ) {\n\t\t\t\tthrow new Error( format( 'invalid operation. A subsequence may only include a single ellipsis. Value: `%s`.', property ) );\n\t\t\t}\n\t\t\tif ( s.code === 'ERR_SLICE_INVALID_SUBSEQUENCE' ) {\n\t\t\t\tthrow new Error( format( 'invalid operation. Unsupported slice operation. Value: `%s`.', property ) );\n\t\t\t}\n\t\t\t// NOTE: the following error check must come last due to fall-through when in non-strict mode...\n\t\t\tif ( s.code === 'ERR_SLICE_OUT_OF_BOUNDS' ) {\n\t\t\t\tif ( strict ) {\n\t\t\t\t\tthrow new RangeError( format( 'invalid operation. Slice exceeds array bounds. Array shape: (%s).', shape.join( ',' ) ) );\n\t\t\t\t}\n\t\t\t\t// Repeat parsing, this time allowing for out-of-bounds slices:\n\t\t\t\ts = seq2multislice( prop, shape, false );\n\t\t\t}\n\t\t}\n\t}\n\t// Case: array syntax (e.g., [ Slice(0,10,1), null, Slice(4,null,-1) ]) or Slice or integer or arbitrary string (where the latter three are not valid for >2d arrays)\n\telse {\n\t\ts = sargs2multislice( prop );\n\t\tif ( s === null ) { // FIXME: need to gracefully handle non-existent properties\n\t\t\tthrow new Error( format( 'invalid operation. Unsupported slice operation. Value: `%s`.', property ) );\n\t\t}\n\t}\n\treturn s;\n}\n\n\n// EXPORTS //\n\nmodule.exports = prop2slice;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2023 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar propertiesIn = require( '@stdlib/utils-properties-in' );\nvar contains = require( '@stdlib/array-base-assert-contains' ).factory;\nvar ndarray = require( '@stdlib/ndarray-ctor' );\nvar defaults = require( '@stdlib/ndarray-defaults' );\n\n\n// MAIN //\n\n/**\n* Tests whether a property name exists on the parent prototype.\n*\n* @private\n* @name hasProperty\n* @type {Function}\n* @param {(string|symbol)} name - property name\n* @returns {boolean} boolean indicating whether the property exists on the parent prototype\n*\n* @example\n* var bool = hasProperty( 'get' );\n* // returns true\n*\n* bool = hasProperty( 'foo' );\n* // returns false\n*/\nvar hasProperty = contains( propertiesIn( new ndarray( 'generic', [ 0 ], [], [ 0 ], 0, defaults.get( 'order' ) ) ) );\n\n\n// EXPORTS //\n\nmodule.exports = hasProperty;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2023 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isFunction = require( '@stdlib/assert-is-function' );\n\n\n// MAIN //\n\n/**\n* Returns the property value associated with a specified property.\n*\n* @private\n* @param {Object} target - target object\n* @param {(string|symbol)} property - property\n* @param {Object} receiver - the proxy object or an object inheriting from the proxy\n* @returns {*} result\n*/\nfunction getValue( target, property, receiver ) {\n\tvar value = target[ property ];\n\tif ( isFunction( value ) ) {\n\t\treturn wrapper;\n\t}\n\treturn value;\n\n\t/**\n\t* Method wrapper.\n\t*\n\t* @private\n\t* @returns {*} results\n\t*/\n\tfunction wrapper() {\n\t\tvar args;\n\t\tvar i;\n\n\t\targs = [];\n\t\tfor ( i = 0; i < arguments.length; i++ ) {\n\t\t\targs.push( arguments[ i ] );\n\t\t}\n\t\treturn value.apply( ( this === receiver ) ? target : this, args ); // eslint-disable-line no-invalid-this\n\t}\n}\n\n\n// EXPORTS //\n\nmodule.exports = getValue;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2023 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar replace = require( '@stdlib/string-base-replace' );\n\n\n// MAIN //\n\n/**\n* Returns an updated error message for trapped errors.\n*\n* @private\n* @param {string} msg - error message\n* @returns {string} updated message\n*/\nfunction errMessage( msg ) {\n\treturn replace( msg, /^invalid argument/, 'invalid operation' );\n}\n\n\n// EXPORTS //\n\nmodule.exports = errMessage;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2023 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar slice = require( '@stdlib/ndarray-base-slice' );\nvar errMessage = require( './error_message.js' );\n\n\n// MAIN //\n\n/**\n* Returns an ndarray view.\n*\n* @private\n* @param {Object} target - target object\n* @param {string} property - property name\n* @param {Object} receiver - the proxy object or an object inheriting from the proxy\n* @param {Function} prop2slice - function for converting an indexing expression to a slice\n* @throws {Error} invalid slice operation\n* @throws {RangeError} number of slice dimensions must match the number of array dimensions\n* @returns {FancyArray} result\n*/\nfunction getSlice( target, property, receiver, prop2slice ) {\n\tvar strict;\n\tvar s;\n\n\tstrict = false; // TODO: support strict mode\n\ts = prop2slice( target, property, strict );\n\ttry {\n\t\treturn slice( receiver, s, strict, false );\n\t} catch ( err ) {\n\t\tthrow new err.constructor( errMessage( err.message ) );\n\t}\n}\n\n\n// EXPORTS //\n\nmodule.exports = getSlice;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2023 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar hasProperty = require( './has_property.js' );\nvar getValue = require( './get_value.js' );\nvar getSlice = require( './get_slice.js' );\n\n\n// MAIN //\n\n/**\n* Returns a trap for retrieving property values.\n*\n* @private\n* @param {Function} prop2slice - function for converting an indexing expression to a slice\n* @returns {Function} handler\n*/\nfunction factory( prop2slice ) {\n\treturn get;\n\n\t/**\n\t* Trap for retrieving property values.\n\t*\n\t* @private\n\t* @param {Object} target - target object\n\t* @param {(string|symbol)} property - property name\n\t* @param {Object} receiver - the proxy object or an object inheriting from the proxy\n\t* @throws {Error} invalid slice operation\n\t* @throws {RangeError} number of slice dimensions must match the number of array dimensions\n\t* @returns {*} result\n\t*/\n\tfunction get( target, property, receiver ) {\n\t\tif ( hasProperty( property ) ) {\n\t\t\treturn getValue( target, property, receiver );\n\t\t}\n\t\treturn getSlice( target, property, receiver, prop2slice );\n\t}\n}\n\n\n// EXPORTS //\n\nmodule.exports = factory;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2023 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MAIN //\n\n/**\n* Sets the value associated with a specified property.\n*\n* @private\n* @param {Object} target - target object\n* @param {string} property - property\n* @param {*} value - new value\n* @param {Object} receiver - the proxy object or an object inheriting from the proxy\n* @returns {boolean} boolean indicating whether assignment succeeded\n*/\nfunction setValue( target, property, value ) {\n\ttarget[ property ] = value;\n\treturn true;\n}\n\n\n// EXPORTS //\n\nmodule.exports = setValue;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2023 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar sliceAssign = require( '@stdlib/ndarray-base-slice-assign' );\nvar isndarrayLike = require( '@stdlib/assert-is-ndarray-like' );\nvar isNumber = require( '@stdlib/assert-is-number' ).isPrimitive;\nvar isInteger = require( '@stdlib/assert-is-integer' ).isPrimitive;\nvar isComplexLike = require( '@stdlib/assert-is-complex-like' );\nvar isComplexDataType = require( '@stdlib/ndarray-base-assert-is-complex-floating-point-data-type' );\nvar isFloatingDataType = require( '@stdlib/ndarray-base-assert-is-floating-point-data-type' );\nvar isUnsignedIntegerDataType = require( '@stdlib/ndarray-base-assert-is-unsigned-integer-data-type' );\nvar isSignedIntegerDataType = require( '@stdlib/ndarray-base-assert-is-signed-integer-data-type' );\nvar isSafeCast = require( '@stdlib/ndarray-base-assert-is-safe-data-type-cast' );\nvar INT8_MAX = require( '@stdlib/constants-int8-max' );\nvar INT16_MAX = require( '@stdlib/constants-int16-max' );\nvar INT32_MAX = require( '@stdlib/constants-int32-max' );\nvar minDataType = require( '@stdlib/ndarray-min-dtype' );\nvar complexDataType = require( '@stdlib/complex-dtype' );\nvar scalar2ndarray = require( '@stdlib/ndarray-from-scalar' );\nvar format = require( '@stdlib/string-format' );\nvar errMessage = require( './error_message.js' );\n\n\n// FUNCTIONS //\n\n/**\n* Returns an options object for creating an ndarray from a scalar value.\n*\n* @private\n* @param {string} dtype - output array data type\n* @returns {Object} options\n*/\nfunction options( dtype ) {\n\treturn {\n\t\t'dtype': dtype\n\t};\n}\n\n\n// MAIN //\n\n/**\n* Sets element values belonging to the ndarray view specified by an indexing expression.\n*\n* @private\n* @param {Object} target - target object\n* @param {string} property - indexing expression\n* @param {*} value - new value\n* @param {Object} receiver - the proxy object or an object inheriting from the proxy\n* @param {Function} prop2slice - function for converting an indexing expression to a slice\n* @throws {Error} invalid slice operation\n* @throws {RangeError} number of slice dimensions must match the number of array dimensions\n* @throws {Error} assigned value must be broadcast compatible with target array view\n* @throws {TypeError} assigned value cannot be safely cast to the target array data type\n* @throws {TypeError} target array must have a supported data type\n* @returns {boolean} boolean indicating whether assignment succeeded\n*/\nfunction setSlice( target, property, value, receiver, prop2slice ) {\n\tvar strict;\n\tvar vdt;\n\tvar dt;\n\tvar s;\n\n\tif ( !isndarrayLike( value ) ) {\n\t\tdt = target.dtype;\n\n\t\t// If the target array data type is \"generic\", we can just go ahead and \"cast\" to the target array data type...\n\t\tif ( dt === 'generic' ) {\n\t\t\tvalue = scalar2ndarray( value, options( dt ) );\n\t\t}\n\t\t// If the input value is a real-valued number, we need to inspect the value to determine whether we can safely cast the value to the target array data type...\n\t\telse if ( isNumber( value ) ) {\n\t\t\t// If the target array has a floating-point data type, we can just go ahead and cast the input scalar to the target array data type, as number literals are, by default, double-precision floating-point values and casting to lower-precision floating-point is allowed...\n\t\t\tif ( isFloatingDataType( dt ) ) {\n\t\t\t\tvalue = scalar2ndarray( value, options( dt ) );\n\t\t\t}\n\t\t\t// If the target array has an unsigned integer data type, then the assigned value must be a compatible nonnegative integer value...\n\t\t\telse if ( isUnsignedIntegerDataType( dt ) ) {\n\t\t\t\tvdt = minDataType( value ); // note: we rely on data type resolution to handle the case where `value` is a non-integer value. In that case, `vdt` will resolve to a floating-point data type and `isSafeCast` will evaluate to `false`\n\t\t\t\tif ( isSafeCast( vdt, dt ) ) {\n\t\t\t\t\tvalue = scalar2ndarray( value, options( dt ) );\n\t\t\t\t} else {\n\t\t\t\t\tthrow new TypeError( format( 'invalid operation. Assigned value cannot be safely cast to the target array data type. Data types: [%s, %s].', vdt, dt ) );\n\t\t\t\t}\n\t\t\t}\n\t\t\t// If the target array has a signed integer data type, then the assigned value must be a compatible integer value...\n\t\t\telse if ( isSignedIntegerDataType( dt ) ) {\n\t\t\t\tif ( !isInteger( value ) ) {\n\t\t\t\t\tthrow new TypeError( format( 'invalid operation. Assigned value cannot be safely cast to the target array data type. Data types: [%s, %s].', minDataType( value ), dt ) );\n\t\t\t\t}\n\t\t\t\t// Manually resolve the minimum data type of the closest \"kind\" necessary for storing a scalar value, as `minDataType()` defaults to unsigned integer data types when a scalar value is greater than or equal to zero...\n\t\t\t\tif ( value < 0 ) {\n\t\t\t\t\tvdt = minDataType( value );\n\t\t\t\t} else if ( value <= INT8_MAX ) { // TODO: consider moving this logic to `@stdlib/ndarray/base/min-signed-intger-dtype` where the interface can assume that `value` is integer-valued\n\t\t\t\t\tvdt = 'int8';\n\t\t\t\t} else if ( value <= INT16_MAX ) {\n\t\t\t\t\tvdt = 'int16';\n\t\t\t\t} else if ( value <= INT32_MAX ) {\n\t\t\t\t\tvdt = 'int32';\n\t\t\t\t} else {\n\t\t\t\t\tvdt = 'float64';\n\t\t\t\t}\n\t\t\t\tif ( isSafeCast( vdt, dt ) ) {\n\t\t\t\t\tvalue = scalar2ndarray( value, options( dt ) );\n\t\t\t\t} else {\n\t\t\t\t\tthrow new TypeError( format( 'invalid operation. Assigned value cannot be safely cast to the target array data type. Data types: [%s, %s].', vdt, dt ) );\n\t\t\t\t}\n\t\t\t}\n\t\t\t// If the target array has \"binary\" data type, then the assigned value must be a compatible nonnegative integer value...\n\t\t\telse if ( dt === 'binary' ) {\n\t\t\t\tvdt = minDataType( value );\n\t\t\t\tif ( vdt === 'uint8' ) {\n\t\t\t\t\tvalue = scalar2ndarray( value, options( dt ) );\n\t\t\t\t} else {\n\t\t\t\t\tthrow new TypeError( format( 'invalid operation. Assigned value cannot be safely cast to the target array data type. Data types: [%s, %s].', vdt, dt ) );\n\t\t\t\t}\n\t\t\t}\n\t\t\t// If we reach this point, we must be dealing with an unexpected target array data type...\n\t\t\telse {\n\t\t\t\t// Raise an exception in order to flag that, in order to perform assignment, we need to add explicit support for additional data types:\n\t\t\t\tthrow new TypeError( format( 'invalid operation. Unsupported target array data type. Data type: `%s`.', dt ) );\n\t\t\t}\n\t\t}\n\t\t// If the target array is not \"generic\" and the input value is a complex number, then the target array data type must also have a complex number data type...\n\t\telse if ( isComplexLike( value ) ) {\n\t\t\tif ( !isComplexDataType( dt ) ) {\n\t\t\t\tthrow new TypeError( format( 'invalid operation. Assigned value cannot be safely cast to the target array data type. Data types: [%s, %s].', complexDataType( value ), dt ) );\n\t\t\t}\n\t\t\tvalue = scalar2ndarray( value, options( dt ) );\n\t\t}\n\t\t// If the target array is not \"generic\" and the input value is neither a real- or complex-valued number, raise an exception in order to flag that, in order to perform assignment, we need to add explicit support for additional data types...\n\t\telse {\n\t\t\tthrow new TypeError( format( 'invalid operation. Assigned value cannot be safely cast to the target array data type. Data types: [%s, %s].', typeof value, dt ) );\n\t\t}\n\t}\n\tstrict = false; // TODO: support strict mode\n\ts = prop2slice( target, property, strict );\n\ttry {\n\t\tsliceAssign( value, receiver, s, strict );\n\t\treturn true;\n\t} catch ( err ) {\n\t\tthrow new err.constructor( errMessage( err.message ) );\n\t}\n}\n\n\n// EXPORTS //\n\nmodule.exports = setSlice;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2023 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar hasProperty = require( './has_property.js' );\nvar setValue = require( './set_value.js' );\nvar setSlice = require( './set_slice.js' );\n\n\n// MAIN //\n\n/**\n* Returns a trap for setting property values.\n*\n* @private\n* @param {Function} prop2slice - function for converting an indexing expression to a slice\n* @returns {Function} handler\n*/\nfunction factory( prop2slice ) {\n\treturn set;\n\n\t/**\n\t* Trap for setting property values.\n\t*\n\t* @private\n\t* @param {Object} target - target object\n\t* @param {(string|symbol)} property - property name\n\t* @param {*} value - new value\n\t* @param {Object} receiver - the proxy object or an object inheriting from the proxy\n\t* @throws {Error} invalid slice operation\n\t* @throws {RangeError} number of slice dimensions must match the number of array dimensions\n\t* @throws {Error} assigned value must be broadcast compatible with output array view\n\t* @throws {TypeError} assigned value cannot be safely cast to the output array data type\n\t* @returns {boolean} boolean indicating whether assignment succeeded\n\t*/\n\tfunction set( target, property, value, receiver ) {\n\t\tif ( hasProperty( property ) ) {\n\t\t\treturn setValue( target, property, value );\n\t\t}\n\t\treturn setSlice( target, property, value, receiver, prop2slice );\n\t}\n}\n\n\n// EXPORTS //\n\nmodule.exports = factory;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2023 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* eslint-disable max-len */\n\n'use strict';\n\n// MODULES //\n\nvar setReadOnly = require( '@stdlib/utils-define-nonenumerable-read-only-property' );\nvar parent = require( '@stdlib/ndarray-ctor' ); // eslint-disable-line stdlib/no-redeclare\nvar inherit = require( '@stdlib/utils-inherit' );\nvar Proxy = require( '@stdlib/proxy-ctor' );\nvar prop2slice0d = require( './prop2slice.0d.js' );\nvar prop2slice1d = require( './prop2slice.1d.js' );\nvar prop2slicend = require( './prop2slice.nd.js' );\nvar get = require( './get.js' );\nvar set = require( './set.js' );\n\n\n// VARIABLES //\n\nvar get0d = get( prop2slice0d );\nvar set0d = set( prop2slice0d );\nvar get1d = get( prop2slice1d );\nvar set1d = set( prop2slice1d );\nvar getnd = get( prop2slicend );\nvar setnd = set( prop2slicend );\n\n\n// MAIN //\n\n/**\n* Fancy ndarray constructor.\n*\n* @constructor\n* @param {string} dtype - data type\n* @param {Collection} buffer - data buffer\n* @param {NonNegativeIntegerArray} shape - array shape\n* @param {IntegerArray} strides - array strides\n* @param {NonNegativeInteger} offset - index offset\n* @param {string} order - specifies whether an array is row-major (C-style) or column-major (Fortran-style)\n* @param {Options} [options] - function options\n* @param {string} [options.mode=\"throw\"] - specifies how to handle indices which exceed array dimensions\n* @param {StringArray} [options.submode=[\"throw\"]] - specifies how to handle subscripts which exceed array dimensions on a per dimension basis\n* @param {boolean} [options.readonly=false] - boolean indicating whether an array should be read-only\n* @throws {TypeError} `dtype` argument must be a supported ndarray data type\n* @throws {TypeError} `buffer` argument must be an array-like object, typed-array-like, or a Buffer\n* @throws {TypeError} `buffer` argument `get` and `set` properties must be functions\n* @throws {TypeError} `shape` argument must be an array-like object containing nonnegative integers\n* @throws {Error} `shape` argument length must equal the number of dimensions\n* @throws {TypeError} `strides` argument must be an array-like object containing integers\n* @throws {Error} `strides` argument length must equal the number of dimensions (except for zero-dimensional arrays; in which case, the `strides` argument length must be equal to `1`)\n* @throws {Error} for zero-dimensional ndarrays, the `strides` argument must contain a single element equal to `0`\n* @throws {TypeError} `offset` argument must be a nonnegative integer\n* @throws {TypeError} `order` argument must be a supported ndarray order\n* @throws {Error} `buffer` argument must be compatible with specified meta data\n* @throws {TypeError} options argument must be an object\n* @throws {TypeError} must provide valid options\n* @throws {RangeError} too many dimensions\n* @returns {FancyArray} FancyArray instance\n*\n* @example\n* var buffer = [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0 ];\n* var shape = [ 3, 2 ];\n* var strides = [ 2, 1 ];\n* var offset = 0;\n*\n* var out = new FancyArray( 'generic', buffer, shape, strides, offset, 'row-major' );\n* // returns <FancyArray>\n*/\nfunction FancyArray( dtype, buffer, shape, strides, offset, order, options ) {\n\tvar handlers;\n\tvar nargs;\n\tvar ndims;\n\n\tnargs = arguments.length;\n\tif ( !( this instanceof FancyArray ) ) {\n\t\tif ( nargs < 7 ) {\n\t\t\treturn new FancyArray( dtype, buffer, shape, strides, offset, order );\n\t\t}\n\t\treturn new FancyArray( dtype, buffer, shape, strides, offset, order, options );\n\t}\n\t// Call the parent constructor:\n\tparent.call( this, dtype, buffer, shape, strides, offset, order, ( nargs < 7 ) ? {} : options );\n\n\tif ( Proxy ) { // NOTE: cannot use `@stdlib/assert/has-proxy-support` here, as that API uses code evaluation and might violate CSPs\n\t\tndims = shape.length;\n\t\thandlers = {};\n\t\tif ( ndims === 0 ) {\n\t\t\thandlers.get = get0d;\n\t\t\thandlers.set = set0d;\n\t\t} else if ( ndims === 1 ) {\n\t\t\thandlers.get = get1d;\n\t\t\thandlers.set = set1d;\n\t\t} else {\n\t\t\thandlers.get = getnd;\n\t\t\thandlers.set = setnd;\n\t\t}\n\t\treturn new Proxy( this, handlers );\n\t}\n\t// TODO: replace with `@stdlib/console/warn` (or equivalent once available)\n\tconsole.warn( 'WARNING: Proxy objects are not supported in the current environment. Some `FancyArray` functionality may not be available.' ); // eslint-disable-line no-console\n\treturn this;\n}\n\n// Inherit from the parent constructor:\ninherit( FancyArray, parent );\n\n/**\n* Constructor name.\n*\n* @name name\n* @memberof FancyArray\n* @type {string}\n* @default 'ndarray'\n*\n* @example\n* var str = FancyArray.name;\n* // returns 'ndarray'\n*/\nsetReadOnly( FancyArray, 'name', 'ndarray' );\n\n\n// EXPORTS //\n\nmodule.exports = FancyArray;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2023 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Fancy array constructor.\n*\n* @module @stdlib/ndarray-fancy\n*\n* @example\n* var FancyArray = require( '@stdlib/ndarray-fancy' );\n*\n* var buffer = [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0 ];\n* var shape = [ 3, 2 ];\n* var strides = [ 2, 1 ];\n* var offset = 0;\n*\n* var out = new FancyArray( 'generic', buffer, shape, strides, offset, 'row-major' );\n* // returns <FancyArray>\n*/\n\n// MODULES //\n\nvar main = require( './main.js' );\n\n\n// EXPORTS //\n\nmodule.exports = main;\n"],
  "mappings": "uGAAA,IAAAA,EAAAC,EAAA,SAAAC,GAAAC,EAAA,cAyCA,IAAIC,GAAa,aAKjBD,EAAO,QAAUC,KC9CjB,IAAAC,EAAAC,EAAA,SAAAC,GAAAC,EAAA,cAyCA,IAAIC,GAAY,IAKhBD,EAAO,QAAUC,KC9CjB,IAAAC,EAAAC,EAAA,SAAAC,GAAAC,EAAA,cAsBA,IAAIC,GAAO,QAAS,0BAA2B,EAC3CC,GAAU,QAAS,6BAA8B,EACjDC,EAAa,QAAS,qBAAsB,EAC5CC,GAAiB,QAAS,mCAAoC,EAC9DC,GAAiB,QAAS,mCAAoC,EAC9DC,GAAY,QAAS,8BAA+B,EACpDC,EAAS,QAAS,uBAAwB,EAC1CC,GAAa,IACbC,GAAY,IAgBhB,SAASC,GAAYC,EAAQC,EAAW,CACvC,IAAIC,EACAC,EACAC,EACAC,EAQJ,GANAF,EAAOb,GAAMW,CAAS,EAGtBG,EAAKD,EAAM,CAAE,EAGRC,IAAO,IAAM,CAGjB,GADAC,EAAIV,GAAWQ,CAAK,EACfE,IAAM,KACV,MAAM,IAAI,MAAOT,EAAQ,+DAAgEK,CAAS,CAAE,EAGrGI,EAAI,IAAIb,EAAYa,CAAE,CACvB,SAEUD,IAAO,KAGhB,GADAC,EAAIZ,GAAgBU,CAAK,EACpBE,IAAM,KACV,MAAM,IAAI,MAAOT,EAAQ,+DAAgEK,CAAS,CAAE,UAI5FJ,GAAW,KAAMM,CAAK,EAE/BE,EAAI,SAAUF,EAAM,EAAG,EAGvBE,EAAI,IAAIb,EAAYa,CAAE,UAGbP,GAAU,KAAMK,CAAK,GAG9B,GAFAD,EAAQF,EAAO,MACfK,EAAIX,GAAgBS,EAAMD,EAAO,EAAK,EACjCG,EAAE,KACN,MAAKA,EAAE,OAAS,8BACT,IAAI,MAAOT,EAAQ,sFAAuFK,CAAS,CAAE,EAEvHI,EAAE,OAAS,6BACT,IAAI,MAAOT,EAAQ,oFAAqFK,CAAS,CAAE,EAErHI,EAAE,OAAS,gCACT,IAAI,MAAOT,EAAQ,+DAAgEK,CAAS,CAAE,EAG/F,IAAI,WAAYL,EAAQ,wIAAyIM,EAAM,KAAM,GAAI,EAAGX,GAASY,EAAM,UAAW,EAAG,EAAE,MAAO,GAAI,EAAE,MAAO,CAAE,UAIvOA,EAAK,SAAW,GAAKA,IAAS,MACvCE,EAAI,IAAIb,MAIR,OAAM,IAAI,MAAOI,EAAQ,+DAAgEK,CAAS,CAAE,EAErG,OAAOI,CACR,CAKAhB,EAAO,QAAUU,KCnHjB,IAAAO,EAAAC,EAAA,SAAAC,GAAAC,EAAA,cAsBA,IAAIC,GAAO,QAAS,0BAA2B,EAC3CC,GAAU,QAAS,6BAA8B,EACjDC,EAAa,QAAS,qBAAsB,EAC5CC,GAAiB,QAAS,mCAAoC,EAC9DC,EAAiB,QAAS,mCAAoC,EAC9DC,GAAY,QAAS,8BAA+B,EACpDC,EAAS,QAAS,uBAAwB,EAC1CC,GAAa,IAgBjB,SAASC,GAAYC,EAAQC,EAAUC,EAAS,CAC/C,IAAIC,EACAC,EACAC,EACAC,EAQJ,GANAF,EAAOb,GAAMU,CAAS,EAGtBI,EAAKD,EAAM,CAAE,EAGRC,IAAO,IAAM,CAGjB,GADAC,EAAIV,GAAWQ,CAAK,EACfE,IAAM,KACV,MAAM,IAAI,MAAOT,EAAQ,+DAAgEI,CAAS,CAAE,EAGrGK,EAAI,IAAIb,EAAYa,CAAE,CACvB,SAEUD,IAAO,KAGhB,GADAC,EAAIZ,GAAgBU,CAAK,EACpBE,IAAM,KACV,MAAM,IAAI,MAAOT,EAAQ,+DAAgEI,CAAS,CAAE,UAI5FH,GAAW,KAAMM,CAAK,EAE/BE,EAAI,SAAUF,EAAM,EAAG,EAGvBE,EAAI,IAAIb,EAAYa,CAAE,UAGbF,EAAK,OAAS,GAGvB,GAFAD,EAAQH,EAAO,MACfM,EAAIX,EAAgBS,EAAMD,EAAO,EAAK,EACjCG,EAAE,KAAO,CACb,GAAKA,EAAE,OAAS,8BACf,MAAM,IAAI,MAAOT,EAAQ,sFAAuFI,CAAS,CAAE,EAE5H,GAAKK,EAAE,OAAS,6BACf,MAAM,IAAI,MAAOT,EAAQ,oFAAqFI,CAAS,CAAE,EAE1H,GAAKK,EAAE,OAAS,gCACf,MAAM,IAAI,MAAOT,EAAQ,+DAAgEI,CAAS,CAAE,EAErG,GAAKK,EAAE,OAAS,gCACf,MAAM,IAAI,WAAYT,EAAQ,wIAAyIG,EAAO,MAAM,KAAM,GAAI,EAAGR,GAASY,EAAM,UAAW,EAAG,EAAE,MAAO,GAAI,EAAE,MAAO,CAAE,EAGvP,GAAKE,EAAE,OAAS,0BAA4B,CAC3C,GAAKJ,EACJ,MAAM,IAAI,WAAYL,EAAQ,oEAAqEM,EAAM,KAAM,GAAI,CAAE,CAAE,EAGxHG,EAAIX,EAAgBS,EAAMD,EAAO,EAAM,CACxC,CACD,MAIA,OAAM,IAAI,WAAYN,EAAQ,wIAAyIG,EAAO,MAAM,KAAM,GAAI,EAAG,CAAE,CAAE,EAEtM,OAAOM,CACR,CAKAhB,EAAO,QAAUS,KCvHjB,IAAAQ,EAAAC,EAAA,SAAAC,GAAAC,EAAA,cAsBA,IAAIC,GAAO,QAAS,0BAA2B,EAC3CC,GAAiB,QAAS,mCAAoC,EAC9DC,EAAiB,QAAS,mCAAoC,EAC9DC,GAAmB,QAAS,qCAAsC,EAClEC,EAAS,QAAS,uBAAwB,EAC1CC,GAAY,IAgBhB,SAASC,GAAYC,EAAQC,EAAUC,EAAS,CAC/C,IAAIC,EACAC,EACAC,EACAC,EAQJ,GANAF,EAAOX,GAAMQ,CAAS,EAGtBI,EAAKD,EAAM,CAAE,EAGRC,IAAO,KAEX,GADAC,EAAIZ,GAAgBU,CAAK,EACpBE,IAAM,KACV,MAAM,IAAI,MAAOT,EAAQ,+DAAgEI,CAAS,CAAE,UAI5FH,GAAU,KAAMM,CAAK,GAAKA,IAAS,OAG5C,GAFAD,EAAQH,EAAO,MACfM,EAAIX,EAAgBS,EAAMD,EAAO,EAAK,EACjCG,EAAE,KAAO,CACb,GAAKA,EAAE,OAAS,8BACf,MAAM,IAAI,MAAOT,EAAQ,sFAAuFI,CAAS,CAAE,EAE5H,GAAKK,EAAE,OAAS,6BACf,MAAM,IAAI,MAAOT,EAAQ,oFAAqFI,CAAS,CAAE,EAE1H,GAAKK,EAAE,OAAS,gCACf,MAAM,IAAI,MAAOT,EAAQ,+DAAgEI,CAAS,CAAE,EAGrG,GAAKK,EAAE,OAAS,0BAA4B,CAC3C,GAAKJ,EACJ,MAAM,IAAI,WAAYL,EAAQ,oEAAqEM,EAAM,KAAM,GAAI,CAAE,CAAE,EAGxHG,EAAIX,EAAgBS,EAAMD,EAAO,EAAM,CACxC,CACD,UAIAG,EAAIV,GAAkBQ,CAAK,EACtBE,IAAM,KACV,MAAM,IAAI,MAAOT,EAAQ,+DAAgEI,CAAS,CAAE,EAGtG,OAAOK,CACR,CAKAd,EAAO,QAAUO,KClGjB,IAAAQ,EAAAC,EAAA,SAAAC,GAAAC,EAAA,cAsBA,IAAIC,GAAe,QAAS,6BAA8B,EACtDC,GAAW,QAAS,oCAAqC,EAAE,QAC3DC,GAAU,QAAS,sBAAuB,EAC1CC,GAAW,QAAS,0BAA2B,EAqB/CC,GAAcH,GAAUD,GAAc,IAAIE,GAAS,UAAW,CAAE,CAAE,EAAG,CAAC,EAAG,CAAE,CAAE,EAAG,EAAGC,GAAS,IAAK,OAAQ,CAAE,CAAE,CAAE,EAKnHJ,EAAO,QAAUK,KCnDjB,IAAAC,EAAAC,EAAA,SAAAC,GAAAC,EAAA,cAsBA,IAAIC,GAAa,QAAS,4BAA6B,EAcvD,SAASC,GAAUC,EAAQC,EAAUC,EAAW,CAC/C,IAAIC,EAAQH,EAAQC,CAAS,EAC7B,GAAKH,GAAYK,CAAM,EACtB,OAAOC,EAER,OAAOD,EAQP,SAASC,GAAU,CAClB,IAAIC,EACAC,EAGJ,IADAD,EAAO,CAAC,EACFC,EAAI,EAAGA,EAAI,UAAU,OAAQA,IAClCD,EAAK,KAAM,UAAWC,CAAE,CAAE,EAE3B,OAAOH,EAAM,MAAS,OAASD,EAAaF,EAAS,KAAMK,CAAK,CACjE,CACD,CAKAR,EAAO,QAAUE,KChEjB,IAAAQ,EAAAC,EAAA,SAAAC,GAAAC,EAAA,cAsBA,IAAIC,GAAU,QAAS,6BAA8B,EAYrD,SAASC,GAAYC,EAAM,CAC1B,OAAOF,GAASE,EAAK,oBAAqB,mBAAoB,CAC/D,CAKAH,EAAO,QAAUE,KCzCjB,IAAAE,EAAAC,EAAA,SAAAC,GAAAC,EAAA,cAsBA,IAAIC,GAAQ,QAAS,4BAA6B,EAC9CC,GAAa,IAiBjB,SAASC,GAAUC,EAAQC,EAAUC,EAAUC,EAAa,CAC3D,IAAIC,EACAC,EAEJD,EAAS,GACTC,EAAIF,EAAYH,EAAQC,EAAUG,CAAO,EACzC,GAAI,CACH,OAAOP,GAAOK,EAAUG,EAAGD,EAAQ,EAAM,CAC1C,OAAUE,EAAM,CACf,MAAM,IAAIA,EAAI,YAAaR,GAAYQ,EAAI,OAAQ,CAAE,CACtD,CACD,CAKAV,EAAO,QAAUG,KCxDjB,IAAAQ,EAAAC,EAAA,SAAAC,GAAAC,EAAA,cAsBA,IAAIC,GAAc,IACdC,GAAW,IACXC,GAAW,IAYf,SAASC,GAASC,EAAa,CAC9B,OAAOC,EAaP,SAASA,EAAKC,EAAQC,EAAUC,EAAW,CAC1C,OAAKR,GAAaO,CAAS,EACnBN,GAAUK,EAAQC,EAAUC,CAAS,EAEtCN,GAAUI,EAAQC,EAAUC,EAAUJ,CAAW,CACzD,CACD,CAKAL,EAAO,QAAUI,KC7DjB,IAAAM,EAAAC,EAAA,SAAAC,GAAAC,EAAA,cAgCA,SAASC,GAAUC,EAAQC,EAAUC,EAAQ,CAC5C,OAAAF,EAAQC,CAAS,EAAIC,EACd,EACR,CAKAJ,EAAO,QAAUC,KCxCjB,IAAAI,EAAAC,EAAA,SAAAC,GAAAC,EAAA,cAsBA,IAAIC,GAAc,QAAS,mCAAoC,EAC3DC,GAAgB,QAAS,gCAAiC,EAC1DC,GAAW,QAAS,0BAA2B,EAAE,YACjDC,GAAY,QAAS,2BAA4B,EAAE,YACnDC,GAAgB,QAAS,gCAAiC,EAC1DC,GAAoB,QAAS,iEAAkE,EAC/FC,GAAqB,QAAS,yDAA0D,EACxFC,GAA4B,QAAS,2DAA4D,EACjGC,GAA0B,QAAS,yDAA0D,EAC7FC,EAAa,QAAS,oDAAqD,EAC3EC,GAAW,QAAS,4BAA6B,EACjDC,GAAY,QAAS,6BAA8B,EACnDC,GAAY,QAAS,6BAA8B,EACnDC,EAAc,QAAS,2BAA4B,EACnDC,GAAkB,QAAS,uBAAwB,EACnDC,EAAiB,QAAS,6BAA8B,EACxDC,EAAS,QAAS,uBAAwB,EAC1CC,GAAa,IAYjB,SAASC,EAASC,EAAQ,CACzB,MAAO,CACN,MAASA,CACV,CACD,CAqBA,SAASC,GAAUC,EAAQC,EAAUC,EAAOC,EAAUC,EAAa,CAClE,IAAIC,EACAC,EACAC,EACAC,EAEJ,GAAK,CAAC5B,GAAesB,CAAM,EAI1B,GAHAK,EAAKP,EAAO,MAGPO,IAAO,UACXL,EAAQR,EAAgBQ,EAAOL,EAASU,CAAG,CAAE,UAGpC1B,GAAUqB,CAAM,EAEzB,GAAKjB,GAAoBsB,CAAG,EAC3BL,EAAQR,EAAgBQ,EAAOL,EAASU,CAAG,CAAE,UAGpCrB,GAA2BqB,CAAG,EAEvC,GADAD,EAAMd,EAAaU,CAAM,EACpBd,EAAYkB,EAAKC,CAAG,EACxBL,EAAQR,EAAgBQ,EAAOL,EAASU,CAAG,CAAE,MAE7C,OAAM,IAAI,UAAWZ,EAAQ,+GAAgHW,EAAKC,CAAG,CAAE,UAI/IpB,GAAyBoB,CAAG,EAAI,CACzC,GAAK,CAACzB,GAAWoB,CAAM,EACtB,MAAM,IAAI,UAAWP,EAAQ,+GAAgHH,EAAaU,CAAM,EAAGK,CAAG,CAAE,EAczK,GAXKL,EAAQ,EACZI,EAAMd,EAAaU,CAAM,EACdA,GAASb,GACpBiB,EAAM,OACKJ,GAASZ,GACpBgB,EAAM,QACKJ,GAASX,GACpBe,EAAM,QAENA,EAAM,UAEFlB,EAAYkB,EAAKC,CAAG,EACxBL,EAAQR,EAAgBQ,EAAOL,EAASU,CAAG,CAAE,MAE7C,OAAM,IAAI,UAAWZ,EAAQ,+GAAgHW,EAAKC,CAAG,CAAE,CAEzJ,SAEUA,IAAO,SAEhB,GADAD,EAAMd,EAAaU,CAAM,EACpBI,IAAQ,QACZJ,EAAQR,EAAgBQ,EAAOL,EAASU,CAAG,CAAE,MAE7C,OAAM,IAAI,UAAWZ,EAAQ,+GAAgHW,EAAKC,CAAG,CAAE,MAMxJ,OAAM,IAAI,UAAWZ,EAAQ,0EAA2EY,CAAG,CAAE,UAIrGxB,GAAemB,CAAM,EAAI,CAClC,GAAK,CAAClB,GAAmBuB,CAAG,EAC3B,MAAM,IAAI,UAAWZ,EAAQ,+GAAgHF,GAAiBS,CAAM,EAAGK,CAAG,CAAE,EAE7KL,EAAQR,EAAgBQ,EAAOL,EAASU,CAAG,CAAE,CAC9C,KAGC,OAAM,IAAI,UAAWZ,EAAQ,+GAAgH,OAAOO,EAAOK,CAAG,CAAE,EAGlKF,EAAS,GACTG,EAAIJ,EAAYJ,EAAQC,EAAUI,CAAO,EACzC,GAAI,CACH,OAAA1B,GAAauB,EAAOC,EAAUK,EAAGH,CAAO,EACjC,EACR,OAAUI,EAAM,CACf,MAAM,IAAIA,EAAI,YAAab,GAAYa,EAAI,OAAQ,CAAE,CACtD,CACD,CAKA/B,EAAO,QAAUqB,KCvKjB,IAAAW,EAAAC,EAAA,SAAAC,GAAAC,EAAA,cAsBA,IAAIC,GAAc,IACdC,GAAW,IACXC,GAAW,IAYf,SAASC,GAASC,EAAa,CAC9B,OAAOC,EAgBP,SAASA,EAAKC,EAAQC,EAAUC,EAAOC,EAAW,CACjD,OAAKT,GAAaO,CAAS,EACnBN,GAAUK,EAAQC,EAAUC,CAAM,EAEnCN,GAAUI,EAAQC,EAAUC,EAAOC,EAAUL,CAAW,CAChE,CACD,CAKAL,EAAO,QAAUI,KChEjB,IAAAO,GAAAC,EAAA,SAAAC,GAAAC,GAAA,cAwBA,IAAIC,GAAc,QAAS,uDAAwD,EAC/EC,EAAS,QAAS,sBAAuB,EACzCC,GAAU,QAAS,uBAAwB,EAC3CC,EAAQ,QAAS,oBAAqB,EACtCC,GAAe,IACfC,GAAe,IACfC,GAAe,IACfC,EAAM,IACNC,EAAM,IAKNC,GAAQF,EAAKH,EAAa,EAC1BM,GAAQF,EAAKJ,EAAa,EAC1BO,GAAQJ,EAAKF,EAAa,EAC1BO,GAAQJ,EAAKH,EAAa,EAC1BQ,GAAQN,EAAKD,EAAa,EAC1BQ,GAAQN,EAAKF,EAAa,EA4C9B,SAASS,EAAYC,EAAOC,EAAQC,EAAOC,EAASC,EAAQC,EAAOC,EAAU,CAC5E,IAAIC,EACAC,EACAC,EAGJ,OADAD,EAAQ,UAAU,OACV,gBAAgBT,GAOxBd,EAAO,KAAM,KAAMe,EAAOC,EAAQC,EAAOC,EAASC,EAAQC,EAASG,EAAQ,EAAM,CAAC,EAAIF,CAAQ,EAEzFnB,GACJsB,EAAQP,EAAM,OACdK,EAAW,CAAC,EACPE,IAAU,GACdF,EAAS,IAAMd,GACfc,EAAS,IAAMb,IACJe,IAAU,GACrBF,EAAS,IAAMZ,GACfY,EAAS,IAAMX,KAEfW,EAAS,IAAMV,GACfU,EAAS,IAAMT,IAET,IAAIX,EAAO,KAAMoB,CAAS,IAGlC,QAAQ,KAAM,4HAA6H,EACpI,OAzBDC,EAAQ,EACL,IAAIT,EAAYC,EAAOC,EAAQC,EAAOC,EAASC,EAAQC,CAAM,EAE9D,IAAIN,EAAYC,EAAOC,EAAQC,EAAOC,EAASC,EAAQC,EAAOC,CAAQ,CAuB/E,CAGApB,GAASa,EAAYd,CAAO,EAc5BD,GAAae,EAAY,OAAQ,SAAU,EAK3ChB,GAAO,QAAUgB,ICtGjB,IAAIW,GAAO,KAKX,OAAO,QAAUA",
  "names": ["require_re_integer", "__commonJSMin", "exports", "module", "RE_INTEGER", "require_re_subseq", "__commonJSMin", "exports", "module", "RE_SUBSEQ", "require_prop2slice_0d", "__commonJSMin", "exports", "module", "trim", "replace", "MultiSlice", "str2multislice", "seq2multislice", "str2slice", "format", "RE_INTEGER", "RE_SUBSEQ", "prop2slice", "target", "property", "shape", "prop", "ch", "s", "require_prop2slice_1d", "__commonJSMin", "exports", "module", "trim", "replace", "MultiSlice", "str2multislice", "seq2multislice", "str2slice", "format", "RE_INTEGER", "prop2slice", "target", "property", "strict", "shape", "prop", "ch", "s", "require_prop2slice_nd", "__commonJSMin", "exports", "module", "trim", "str2multislice", "seq2multislice", "sargs2multislice", "format", "RE_SUBSEQ", "prop2slice", "target", "property", "strict", "shape", "prop", "ch", "s", "require_has_property", "__commonJSMin", "exports", "module", "propertiesIn", "contains", "ndarray", "defaults", "hasProperty", "require_get_value", "__commonJSMin", "exports", "module", "isFunction", "getValue", "target", "property", "receiver", "value", "wrapper", "args", "i", "require_error_message", "__commonJSMin", "exports", "module", "replace", "errMessage", "msg", "require_get_slice", "__commonJSMin", "exports", "module", "slice", "errMessage", "getSlice", "target", "property", "receiver", "prop2slice", "strict", "s", "err", "require_get", "__commonJSMin", "exports", "module", "hasProperty", "getValue", "getSlice", "factory", "prop2slice", "get", "target", "property", "receiver", "require_set_value", "__commonJSMin", "exports", "module", "setValue", "target", "property", "value", "require_set_slice", "__commonJSMin", "exports", "module", "sliceAssign", "isndarrayLike", "isNumber", "isInteger", "isComplexLike", "isComplexDataType", "isFloatingDataType", "isUnsignedIntegerDataType", "isSignedIntegerDataType", "isSafeCast", "INT8_MAX", "INT16_MAX", "INT32_MAX", "minDataType", "complexDataType", "scalar2ndarray", "format", "errMessage", "options", "dtype", "setSlice", "target", "property", "value", "receiver", "prop2slice", "strict", "vdt", "dt", "s", "err", "require_set", "__commonJSMin", "exports", "module", "hasProperty", "setValue", "setSlice", "factory", "prop2slice", "set", "target", "property", "value", "receiver", "require_main", "__commonJSMin", "exports", "module", "setReadOnly", "parent", "inherit", "Proxy", "prop2slice0d", "prop2slice1d", "prop2slicend", "get", "set", "get0d", "set0d", "get1d", "set1d", "getnd", "setnd", "FancyArray", "dtype", "buffer", "shape", "strides", "offset", "order", "options", "handlers", "nargs", "ndims", "main"]
}
