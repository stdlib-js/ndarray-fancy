{
  "version": 3,
  "sources": ["../lib/error_message.js", "../lib/error_constructor.js", "../lib/has_property.js", "../lib/re_integer.js", "../lib/re_subseq.js", "../lib/get.0d.js", "../lib/get.1d.js", "../lib/get.nd.js", "../lib/main.js", "../lib/index.js"],
  "sourcesContent": ["/**\n* @license Apache-2.0\n*\n* Copyright (c) 2023 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar replace = require( '@stdlib/string-base-replace' );\n\n\n// MAIN //\n\n/**\n* Returns an updated error message for trapped errors.\n*\n* @private\n* @param {string} msg - error message\n* @returns {string} updated message\n*/\nfunction errMessage( msg ) {\n\treturn replace( msg, /^invalid argument/, 'invalid operation' );\n}\n\n\n// EXPORTS //\n\nmodule.exports = errMessage;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2023 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isRangeError = require( '@stdlib/assert-is-range-error' );\nvar isTypeError = require( '@stdlib/assert-is-type-error' );\nvar isSyntaxError = require( '@stdlib/assert-is-syntax-error' );\n\n\n// MAIN //\n\n/**\n* Returns the error constructor for a provided error object.\n*\n* @private\n* @param {Error} err - error object\n* @returns {Function} error constructor\n*/\nfunction errConstructor( err ) {\n\tif ( isRangeError( err ) ) {\n\t\treturn RangeError;\n\t}\n\tif ( isTypeError( err ) ) {\n\t\treturn TypeError;\n\t}\n\tif ( isSyntaxError( err ) ) {\n\t\treturn SyntaxError;\n\t}\n\treturn Error;\n}\n\n\n// EXPORTS //\n\nmodule.exports = errConstructor;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2023 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar propertiesIn = require( '@stdlib/utils-properties-in' );\nvar contains = require( '@stdlib/array-base-assert-contains' ).factory;\nvar ndarray = require( '@stdlib/ndarray-ctor' );\nvar defaults = require( '@stdlib/ndarray-defaults' );\n\n\n// MAIN //\n\n/**\n* Tests whether a property name exists on the parent prototype.\n*\n* @private\n* @name hasProperty\n* @type {Function}\n* @param {(string|symbol)} name - property name\n* @returns {boolean} boolean indicating whether the property exists on the parent prototype\n*\n* @example\n* var bool = hasProperty( 'get' );\n* // returns true\n*\n* bool = hasProperty( 'foo' );\n* // returns false\n*/\nvar hasProperty = contains( propertiesIn( new ndarray( 'generic', [ 0 ], [], [ 0 ], 0, defaults.get( 'order' ) ) ) );\n\n\n// EXPORTS //\n\nmodule.exports = hasProperty;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2023 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MAIN //\n\n/**\n* Regular expression for testing whether a string is an integer string.\n*\n* @private\n* @name RE_INTEGER\n* @type {RegExp}\n*\n* @example\n* var bool = RE_INTEGER.test( '10' );\n* // returns true\n*\n* @example\n* var bool = RE_INTEGER.test( '-1' );\n* // returns true\n*\n* @example\n* var bool = RE_INTEGER.test( '0:10:2' );\n* // returns false\n*/\nvar RE_INTEGER = /^-?[0-9]+$/;\n\n\n// EXPORTS //\n\nmodule.exports = RE_INTEGER;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2023 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MAIN //\n\n/**\n* Regular expression for testing whether a string is a subsequence string.\n*\n* @private\n* @name RE_SUBSEQ\n* @type {RegExp}\n*\n* @example\n* var bool = RE_SUBSEQ.test( '0:10:2' );\n* // returns true\n*\n* @example\n* var bool = RE_SUBSEQ.test( '0' );\n* // returns false\n*\n* @example\n* var bool = RE_SUBSEQ.test( 'Slice(0,10,2)' );\n* // returns false\n*/\nvar RE_SUBSEQ = /:/;\n\n\n// EXPORTS //\n\nmodule.exports = RE_SUBSEQ;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2023 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isFunction = require( '@stdlib/assert-is-function' );\nvar trim = require( '@stdlib/string-base-trim' );\nvar replace = require( '@stdlib/string-base-replace' );\nvar MultiSlice = require( '@stdlib/slice-multi' );\nvar str2multislice = require( '@stdlib/slice-base-str2multislice' );\nvar seq2multislice = require( '@stdlib/slice-base-seq2multislice' );\nvar str2slice = require( '@stdlib/slice-base-str2slice' );\nvar slice = require( '@stdlib/ndarray-base-slice' );\nvar format = require( '@stdlib/string-format' );\nvar errMessage = require( './error_message.js' );\nvar errConstructor = require( './error_constructor.js' );\nvar hasProperty = require( './has_property.js' );\nvar RE_INTEGER = require( './re_integer.js' );\nvar RE_SUBSEQ = require( './re_subseq.js' );\n\n\n// MAIN //\n\n/**\n* Trap for retrieving property values.\n*\n* @private\n* @param {Object} target - target object\n* @param {(string|symbol)} property - property name\n* @param {Object} receiver - the proxy object or an object inheriting from the proxy\n* @throws {Error} invalid slice operation\n* @throws {RangeError} number of slice dimensions must match the number of array dimensions\n* @returns {*} result\n*/\nfunction get( target, property, receiver ) { // eslint-disable-line stdlib/jsdoc-require-throws-tags\n\tvar value;\n\tvar shape;\n\tvar prop;\n\tvar ch;\n\tvar E;\n\tvar s;\n\tif ( hasProperty( property ) ) {\n\t\tvalue = target[ property ];\n\t\tif ( isFunction( value ) ) {\n\t\t\treturn wrapper;\n\t\t}\n\t\treturn value;\n\t}\n\tprop = trim( property );\n\n\t// Retrieve the first character in order to to detect how a slice operation was specified:\n\tch = prop[ 0 ];\n\n\t// Case: slice\n\tif ( ch === 'S' ) {\n\t\t// Convert the string to a slice object:\n\t\ts = str2slice( property );\n\t\tif ( s === null ) {\n\t\t\tthrow new Error( format( 'invalid operation. Unsupported slice operation. Value: `%s`.', property ) );\n\t\t}\n\t\t// Create a multi-slice:\n\t\ts = new MultiSlice( s );\n\t}\n\t// Case: multi-slice\n\telse if ( ch === 'M' ) {\n\t\t// Convert the string to a slice object:\n\t\ts = str2multislice( prop );\n\t\tif ( s === null ) {\n\t\t\tthrow new Error( format( 'invalid operation. Unsupported slice operation. Value: `%s`.', property ) );\n\t\t}\n\t}\n\t// Case: integer\n\telse if ( RE_INTEGER.test( prop ) ) {\n\t\t// Convert the string to a numeric value:\n\t\ts = parseInt( prop, 10 );\n\n\t\t// Create a multi-slice:\n\t\ts = new MultiSlice( s );\n\t}\n\t// Case: subsequence string (e.g., ':10,1,::-1,:,-5,2::3')\n\telse if ( RE_SUBSEQ.test( prop ) ) {\n\t\tshape = target.shape;\n\t\ts = seq2multislice( prop, shape, true );\n\t\tif ( s.code ) {\n\t\t\tif ( s.code === 'ERR_SLICE_INVALID_INCREMENT' ) {\n\t\t\t\tthrow new Error( format( 'invalid operation. A subsequence increment must be a non-zero integer. Value: `%s`.', property ) );\n\t\t\t}\n\t\t\tif ( s.code === 'ERR_SLICE_INVALID_ELLIPSIS' ) {\n\t\t\t\tthrow new Error( format( 'invalid operation. A subsequence may only include a single ellipsis. Value: `%s`.', property ) );\n\t\t\t}\n\t\t\tif ( s.code === 'ERR_SLICE_INVALID_SUBSEQUENCE' ) {\n\t\t\t\tthrow new Error( format( 'invalid operation. Unsupported slice operation. Value: `%s`.', property ) );\n\t\t\t}\n\t\t\t// s.code === 'ERR_SLICE_TOO_MANY_DIMENSIONS'\n\t\t\tthrow new RangeError( format( 'invalid operation. Number of slice dimensions does not match the number of array dimensions. Array shape: (%s). Slice dimensions: %u.', shape.join( ',' ), replace( prop, /\\.\\.\\.,/, '' ).split( ',' ).length ) );\n\t\t}\n\t}\n\t// Case: empty string or ellipsis\n\telse if ( prop.length === 0 || prop === '...' ) {\n\t\ts = new MultiSlice();\n\t}\n\t// Case: non-empty string\n\telse {\n\t\tthrow new Error( format( 'invalid operation. Unsupported slice operation. Value: `%s`.', property ) );\n\t}\n\ttry {\n\t\treturn slice( receiver, s, true );\n\t} catch ( err ) {\n\t\tE = errConstructor( err );\n\t\tthrow new E( errMessage( err.message ) );\n\t}\n\n\t/**\n\t* Method wrapper.\n\t*\n\t* @private\n\t* @returns {*} results\n\t*/\n\tfunction wrapper() {\n\t\tvar args;\n\t\tvar i;\n\n\t\targs = [];\n\t\tfor ( i = 0; i < arguments.length; i++ ) {\n\t\t\targs.push( arguments[ i ] );\n\t\t}\n\t\treturn value.apply( ( this === receiver ) ? target : this, args ); // eslint-disable-line no-invalid-this\n\t}\n}\n\n\n// EXPORTS //\n\nmodule.exports = get;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2023 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isFunction = require( '@stdlib/assert-is-function' );\nvar trim = require( '@stdlib/string-base-trim' );\nvar replace = require( '@stdlib/string-base-replace' );\nvar MultiSlice = require( '@stdlib/slice-multi' );\nvar str2slice = require( '@stdlib/slice-base-str2slice' );\nvar str2multislice = require( '@stdlib/slice-base-str2multislice' );\nvar seq2multislice = require( '@stdlib/slice-base-seq2multislice' );\nvar slice = require( '@stdlib/ndarray-base-slice' );\nvar format = require( '@stdlib/string-format' );\nvar errMessage = require( './error_message.js' );\nvar errConstructor = require( './error_constructor.js' );\nvar hasProperty = require( './has_property.js' );\nvar RE_INTEGER = require( './re_integer.js' );\n\n\n// MAIN //\n\n/**\n* Trap for retrieving property values.\n*\n* @private\n* @param {Object} target - target object\n* @param {(string|symbol)} property - property name\n* @param {Object} receiver - the proxy object or an object inheriting from the proxy\n* @throws {Error} invalid slice operation\n* @throws {RangeError} number of slice dimensions must match the number of array dimensions\n* @throws {RangeError} slice exceeds array bounds\n* @throws {Error} slice increment must be a non-zero integer\n* @returns {*} result\n*/\nfunction get( target, property, receiver ) { // eslint-disable-line stdlib/jsdoc-require-throws-tags\n\tvar strict;\n\tvar shape;\n\tvar value;\n\tvar prop;\n\tvar ch;\n\tvar E;\n\tvar s;\n\n\tif ( hasProperty( property ) ) {\n\t\tvalue = target[ property ];\n\t\tif ( isFunction( value ) ) {\n\t\t\treturn wrapper;\n\t\t}\n\t\treturn value;\n\t}\n\tprop = trim( property );\n\n\t// Resolve target meta data:\n\tstrict = false; // TODO: support strict mode\n\n\t// Retrieve the first character in order to to detect how a slice operation was specified:\n\tch = prop[ 0 ];\n\n\t// Case: slice\n\tif ( ch === 'S' ) {\n\t\t// Convert the string to a slice object:\n\t\ts = str2slice( property );\n\t\tif ( s === null ) {\n\t\t\tthrow new Error( format( 'invalid operation. Unsupported slice operation. Value: `%s`.', property ) );\n\t\t}\n\t\t// Create a multi-slice:\n\t\ts = new MultiSlice( s );\n\t}\n\t// Case: multi-slice\n\telse if ( ch === 'M' ) {\n\t\t// Convert the string to a slice object:\n\t\ts = str2multislice( prop );\n\t\tif ( s === null ) {\n\t\t\tthrow new Error( format( 'invalid operation. Unsupported slice operation. Value: `%s`.', property ) );\n\t\t}\n\t}\n\t// Case: integer\n\telse if ( RE_INTEGER.test( prop ) ) {\n\t\t// Convert the string to a numeric value:\n\t\ts = parseInt( prop, 10 );\n\n\t\t// Create a multi-slice:\n\t\ts = new MultiSlice( s );\n\t}\n\t// Case: subsequence string\n\telse if ( prop.length > 0 ) {\n\t\tshape = target.shape;\n\t\ts = seq2multislice( prop, shape, true );\n\t\tif ( s.code ) {\n\t\t\tif ( s.code === 'ERR_SLICE_INVALID_INCREMENT' ) {\n\t\t\t\tthrow new Error( format( 'invalid operation. A subsequence increment must be a non-zero integer. Value: `%s`.', property ) );\n\t\t\t}\n\t\t\tif ( s.code === 'ERR_SLICE_INVALID_ELLIPSIS' ) {\n\t\t\t\tthrow new Error( format( 'invalid operation. A subsequence may only include a single ellipsis. Value: `%s`.', property ) );\n\t\t\t}\n\t\t\tif ( s.code === 'ERR_SLICE_INVALID_SUBSEQUENCE' ) {\n\t\t\t\tthrow new Error( format( 'invalid operation. Unsupported slice operation. Value: `%s`.', property ) );\n\t\t\t}\n\t\t\tif ( s.code === 'ERR_SLICE_TOO_MANY_DIMENSIONS' ) {\n\t\t\t\tthrow new RangeError( format( 'invalid operation. Number of slice dimensions does not match the number of array dimensions. Array shape: (%s). Slice dimensions: %u.', target.shape.join( ',' ), replace( prop, /\\.\\.\\.,/, '' ).split( ',' ).length ) );\n\t\t\t}\n\t\t\t// NOTE: the following error check must come last due to fall-through when in non-strict mode...\n\t\t\tif ( s.code === 'ERR_SLICE_OUT_OF_BOUNDS' ) {\n\t\t\t\tif ( strict ) {\n\t\t\t\t\tthrow new RangeError( format( 'invalid operation. Slice exceeds array bounds. Array shape: (%s).', shape.join( ',' ) ) );\n\t\t\t\t}\n\t\t\t\t// Repeat parsing, this time allowing for out-of-bounds slices:\n\t\t\t\ts = seq2multislice( prop, shape, false );\n\t\t\t}\n\t\t}\n\t}\n\t// Case: empty string\n\telse {\n\t\tthrow new RangeError( format( 'invalid operation. Number of slice dimensions does not match the number of array dimensions. Array shape: (%s). Slice dimensions: %u.', target.shape.join( ',' ), 0 ) );\n\t}\n\ttry {\n\t\treturn slice( receiver, s, strict );\n\t} catch ( err ) {\n\t\tE = errConstructor( err );\n\t\tthrow new E( errMessage( err.message ) );\n\t}\n\n\t/**\n\t* Method wrapper.\n\t*\n\t* @private\n\t* @returns {*} results\n\t*/\n\tfunction wrapper() {\n\t\tvar args;\n\t\tvar i;\n\n\t\targs = [];\n\t\tfor ( i = 0; i < arguments.length; i++ ) {\n\t\t\targs.push( arguments[ i ] );\n\t\t}\n\t\treturn value.apply( ( this === receiver ) ? target : this, args ); // eslint-disable-line no-invalid-this\n\t}\n}\n\n\n// EXPORTS //\n\nmodule.exports = get;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2023 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isFunction = require( '@stdlib/assert-is-function' );\nvar trim = require( '@stdlib/string-base-trim' );\nvar str2multislice = require( '@stdlib/slice-base-str2multislice' );\nvar seq2multislice = require( '@stdlib/slice-base-seq2multislice' );\nvar sargs2multislice = require( '@stdlib/slice-base-sargs2multislice' );\nvar slice = require( '@stdlib/ndarray-base-slice' );\nvar format = require( '@stdlib/string-format' );\nvar errMessage = require( './error_message.js' );\nvar errConstructor = require( './error_constructor.js' );\nvar hasProperty = require( './has_property.js' );\nvar RE_SUBSEQ = require( './re_subseq.js' );\n\n\n// FUNCTIONS //\n\n/**\n* Trap for retrieving property values.\n*\n* @private\n* @param {Object} target - target object\n* @param {(string|symbol)} property - property name\n* @param {Object} receiver - the proxy object or an object inheriting from the proxy\n* @throws {Error} invalid slice operation\n* @throws {RangeError} number of slice dimensions must match the number of array dimensions\n* @throws {RangeError} slice exceeds array bounds\n* @throws {Error} slice increment must be a non-zero integer\n* @returns {*} result\n*/\nfunction get( target, property, receiver ) { // eslint-disable-line stdlib/jsdoc-require-throws-tags\n\tvar strict;\n\tvar shape;\n\tvar value;\n\tvar prop;\n\tvar ch;\n\tvar E;\n\tvar s;\n\n\tif ( hasProperty( property ) ) {\n\t\tvalue = target[ property ];\n\t\tif ( isFunction( value ) ) {\n\t\t\treturn wrapper;\n\t\t}\n\t\treturn value;\n\t}\n\tprop = trim( property );\n\n\t// Resolve target meta data:\n\tstrict = false; // TODO: support strict mode\n\n\t// Retrieve the first character in order to to detect how a slice operation was specified:\n\tch = prop[ 0 ];\n\n\t// Case: multi-slice (e.g., 'MultiSlice(Slice(0,10,2),null,2,Slice(10,5,-1))')\n\tif ( ch === 'M' ) {\n\t\ts = str2multislice( prop );\n\t\tif ( s === null ) {\n\t\t\tthrow new Error( format( 'invalid operation. Unsupported slice operation. Value: `%s`.', property ) );\n\t\t}\n\t}\n\t// Case: subsequence string (e.g., '...' or ':10,1,::-1,:,-5,2::3')\n\telse if ( RE_SUBSEQ.test( prop ) || prop === '...' ) {\n\t\tshape = target.shape;\n\t\ts = seq2multislice( prop, shape, true );\n\t\tif ( s.code ) {\n\t\t\tif ( s.code === 'ERR_SLICE_INVALID_INCREMENT' ) {\n\t\t\t\tthrow new Error( format( 'invalid operation. A subsequence increment must be a non-zero integer. Value: `%s`.', property ) );\n\t\t\t}\n\t\t\tif ( s.code === 'ERR_SLICE_INVALID_ELLIPSIS' ) {\n\t\t\t\tthrow new Error( format( 'invalid operation. A subsequence may only include a single ellipsis. Value: `%s`.', property ) );\n\t\t\t}\n\t\t\tif ( s.code === 'ERR_SLICE_INVALID_SUBSEQUENCE' ) {\n\t\t\t\tthrow new Error( format( 'invalid operation. Unsupported slice operation. Value: `%s`.', property ) );\n\t\t\t}\n\t\t\t// NOTE: the following error check must come last due to fall-through when in non-strict mode...\n\t\t\tif ( s.code === 'ERR_SLICE_OUT_OF_BOUNDS' ) {\n\t\t\t\tif ( strict ) {\n\t\t\t\t\tthrow new RangeError( format( 'invalid operation. Slice exceeds array bounds. Array shape: (%s).', shape.join( ',' ) ) );\n\t\t\t\t}\n\t\t\t\t// Repeat parsing, this time allowing for out-of-bounds slices:\n\t\t\t\ts = seq2multislice( prop, shape, false );\n\t\t\t}\n\t\t}\n\t}\n\t// Case: array syntax (e.g., [ Slice(0,10,1), null, Slice(4,null,-1) ]) or Slice or integer or arbitrary string (where the latter three are not valid for >2d arrays)\n\telse {\n\t\ts = sargs2multislice( prop );\n\t\tif ( s === null ) {\n\t\t\tthrow new Error( format( 'invalid operation. Unsupported slice operation. Value: `%s`.', property ) );\n\t\t}\n\t}\n\ttry {\n\t\treturn slice( receiver, s, strict );\n\t} catch ( err ) {\n\t\tE = errConstructor( err );\n\t\tthrow new E( errMessage( err.message ) );\n\t}\n\n\t/**\n\t* Method wrapper.\n\t*\n\t* @private\n\t* @returns {*} results\n\t*/\n\tfunction wrapper() {\n\t\tvar args;\n\t\tvar i;\n\n\t\targs = [];\n\t\tfor ( i = 0; i < arguments.length; i++ ) {\n\t\t\targs.push( arguments[ i ] );\n\t\t}\n\t\treturn value.apply( ( this === receiver ) ? target : this, args ); // eslint-disable-line no-invalid-this\n\t}\n}\n\n\n// EXPORTS //\n\nmodule.exports = get;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2023 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* eslint-disable max-len */\n\n'use strict';\n\n// MODULES //\n\nvar setReadOnly = require( '@stdlib/utils-define-nonenumerable-read-only-property' );\nvar parent = require( '@stdlib/ndarray-ctor' ); // eslint-disable-line stdlib/no-redeclare\nvar inherit = require( '@stdlib/utils-inherit' );\nvar Proxy = require( '@stdlib/proxy-ctor' );\nvar get0d = require( './get.0d.js' );\nvar get1d = require( './get.1d.js' );\nvar getnd = require( './get.nd.js' );\n\n\n// MAIN //\n\n/**\n* Fancy ndarray constructor.\n*\n* @constructor\n* @param {string} dtype - data type\n* @param {Collection} buffer - data buffer\n* @param {NonNegativeIntegerArray} shape - array shape\n* @param {IntegerArray} strides - array strides\n* @param {NonNegativeInteger} offset - index offset\n* @param {string} order - specifies whether an array is row-major (C-style) or column-major (Fortran-style)\n* @param {Options} [options] - function options\n* @param {string} [options.mode=\"throw\"] - specifies how to handle indices which exceed array dimensions\n* @param {StringArray} [options.submode=[\"throw\"]] - specifies how to handle subscripts which exceed array dimensions on a per dimension basis\n* @param {boolean} [options.readonly=false] - boolean indicating whether an array should be read-only\n* @throws {TypeError} `dtype` argument must be a supported ndarray data type\n* @throws {TypeError} `buffer` argument must be an array-like object, typed-array-like, or a Buffer\n* @throws {TypeError} `buffer` argument `get` and `set` properties must be functions\n* @throws {TypeError} `shape` argument must be an array-like object containing nonnegative integers\n* @throws {Error} `shape` argument length must equal the number of dimensions\n* @throws {TypeError} `strides` argument must be an array-like object containing integers\n* @throws {Error} `strides` argument length must equal the number of dimensions (except for zero-dimensional arrays; in which case, the `strides` argument length must be equal to `1`)\n* @throws {Error} for zero-dimensional ndarrays, the `strides` argument must contain a single element equal to `0`\n* @throws {TypeError} `offset` argument must be a nonnegative integer\n* @throws {TypeError} `order` argument must be a supported ndarray order\n* @throws {Error} `buffer` argument must be compatible with specified meta data\n* @throws {TypeError} options argument must be an object\n* @throws {TypeError} must provide valid options\n* @throws {RangeError} too many dimensions\n* @returns {FancyArray} FancyArray instance\n*\n* @example\n* var buffer = [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0 ];\n* var shape = [ 3, 2 ];\n* var strides = [ 2, 1 ];\n* var offset = 0;\n*\n* var out = new FancyArray( 'generic', buffer, shape, strides, offset, 'row-major' );\n* // returns <FancyArray>\n*/\nfunction FancyArray( dtype, buffer, shape, strides, offset, order, options ) {\n\tvar handlers;\n\tvar nargs;\n\tvar ndims;\n\n\tnargs = arguments.length;\n\tif ( !( this instanceof FancyArray ) ) {\n\t\tif ( nargs < 7 ) {\n\t\t\treturn new FancyArray( dtype, buffer, shape, strides, offset, order );\n\t\t}\n\t\treturn new FancyArray( dtype, buffer, shape, strides, offset, order, options );\n\t}\n\t// Call the parent constructor:\n\tparent.call( this, dtype, buffer, shape, strides, offset, order, ( nargs < 7 ) ? {} : options );\n\n\tif ( Proxy ) { // NOTE: cannot use `@stdlib/assert/has-proxy-support` here, as that API uses code evaluation and might violate CSPs\n\t\tndims = shape.length;\n\t\thandlers = {};\n\t\tif ( ndims === 0 ) {\n\t\t\thandlers.get = get0d;\n\t\t} else if ( ndims === 1 ) {\n\t\t\thandlers.get = get1d;\n\t\t} else {\n\t\t\thandlers.get = getnd;\n\t\t}\n\t\treturn new Proxy( this, handlers );\n\t}\n\t// TODO: replace with `@stdlib/console/warn` (or equivalent once available)\n\tconsole.warn( 'WARNING: Proxy objects are not supported in the current environment. Some `FancyArray` functionality may not be available.' ); // eslint-disable-line no-console\n\treturn this;\n}\n\n// Inherit from the parent constructor:\ninherit( FancyArray, parent );\n\n/**\n* Constructor name.\n*\n* @name name\n* @memberof FancyArray\n* @type {string}\n* @default 'ndarray'\n*\n* @example\n* var str = FancyArray.name;\n* // returns 'ndarray'\n*/\nsetReadOnly( FancyArray, 'name', 'ndarray' );\n\n\n// EXPORTS //\n\nmodule.exports = FancyArray;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2023 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Fancy array constructor.\n*\n* @module @stdlib/ndarray-fancy\n*\n* @example\n* var FancyArray = require( '@stdlib/ndarray-fancy' );\n*\n* var buffer = [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0 ];\n* var shape = [ 3, 2 ];\n* var strides = [ 2, 1 ];\n* var offset = 0;\n*\n* var out = new FancyArray( 'generic', buffer, shape, strides, offset, 'row-major' );\n* // returns <FancyArray>\n*/\n\n// MODULES //\n\nvar main = require( './main.js' );\n\n\n// EXPORTS //\n\nmodule.exports = main;\n"],
  "mappings": "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",
  "names": ["require_error_message", "__commonJSMin", "exports", "module", "replace", "errMessage", "msg", "require_error_constructor", "__commonJSMin", "exports", "module", "isRangeError", "isTypeError", "isSyntaxError", "errConstructor", "err", "require_has_property", "__commonJSMin", "exports", "module", "propertiesIn", "contains", "ndarray", "defaults", "hasProperty", "require_re_integer", "__commonJSMin", "exports", "module", "RE_INTEGER", "require_re_subseq", "__commonJSMin", "exports", "module", "RE_SUBSEQ", "require_get_0d", "__commonJSMin", "exports", "module", "isFunction", "trim", "replace", "MultiSlice", "str2multislice", "seq2multislice", "str2slice", "slice", "format", "errMessage", "errConstructor", "hasProperty", "RE_INTEGER", "RE_SUBSEQ", "get", "target", "property", "receiver", "value", "shape", "prop", "ch", "E", "s", "wrapper", "err", "args", "i", "require_get_1d", "__commonJSMin", "exports", "module", "isFunction", "trim", "replace", "MultiSlice", "str2slice", "str2multislice", "seq2multislice", "slice", "format", "errMessage", "errConstructor", "hasProperty", "RE_INTEGER", "get", "target", "property", "receiver", "strict", "shape", "value", "prop", "ch", "E", "s", "wrapper", "err", "args", "i", "require_get_nd", "__commonJSMin", "exports", "module", "isFunction", "trim", "str2multislice", "seq2multislice", "sargs2multislice", "slice", "format", "errMessage", "errConstructor", "hasProperty", "RE_SUBSEQ", "get", "target", "property", "receiver", "strict", "shape", "value", "prop", "ch", "E", "s", "wrapper", "err", "args", "i", "require_main", "__commonJSMin", "exports", "module", "setReadOnly", "parent", "inherit", "Proxy", "get0d", "get1d", "getnd", "FancyArray", "dtype", "buffer", "shape", "strides", "offset", "order", "options", "handlers", "nargs", "ndims", "main"]
}
