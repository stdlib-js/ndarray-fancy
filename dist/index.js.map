{
  "version": 3,
  "sources": ["../lib/has_property.js", "../lib/array_options.js", "../lib/re_integer.js", "../lib/get.0d.js", "../lib/empty.js", "../lib/view.1d.js", "../lib/get.1d.js", "../lib/re_subseq.js", "../lib/slice_start.js", "../lib/slice_strides.js", "../lib/view.nd.js", "../lib/get.nd.js", "../lib/main.js", "../lib/index.js"],
  "sourcesContent": ["/**\n* @license Apache-2.0\n*\n* Copyright (c) 2023 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar propertiesIn = require( '@stdlib/utils-properties-in' );\nvar contains = require( '@stdlib/array-base-assert-contains' ).factory;\nvar ndarray = require( '@stdlib/ndarray-ctor' );\nvar defaults = require( '@stdlib/ndarray-defaults' );\n\n\n// MAIN //\n\n/**\n* Tests whether a property name exists on the parent prototype.\n*\n* @private\n* @name hasProperty\n* @type {Function}\n* @param {(string|symbol)} name - property name\n* @returns {boolean} boolean indicating whether the property exists on the parent prototype\n*\n* @example\n* var bool = hasProperty( 'get' );\n* // returns true\n*\n* bool = hasProperty( 'foo' );\n* // returns false\n*/\nvar hasProperty = contains( propertiesIn( new ndarray( 'generic', [ 0 ], [], [ 0 ], 0, defaults.get( 'order' ) ) ) );\n\n\n// EXPORTS //\n\nmodule.exports = hasProperty;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2023 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MAIN //\n\n/**\n* Returns array creation options.\n*\n* @private\n* @returns {Object} options\n*/\nfunction options() {\n\treturn {\n\t\t// Default to always returning read-only arrays:\n\t\t'readonly': true\n\t};\n}\n\n\n// EXPORTS //\n\nmodule.exports = options;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2023 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MAIN //\n\n/**\n* Regular expression for testing whether a string is an integer string.\n*\n* @private\n* @name RE_INTEGER\n* @type {RegExp}\n*\n* @example\n* var bool = RE_INTEGER.test( '10' );\n* // returns true\n*\n* @example\n* var bool = RE_INTEGER.test( '-1' );\n* // returns true\n*\n* @example\n* var bool = RE_INTEGER.test( '0:10:2' );\n* // returns false\n*/\nvar RE_INTEGER = /^-?[0-9]+$/;\n\n\n// EXPORTS //\n\nmodule.exports = RE_INTEGER;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2023 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isFunction = require( '@stdlib/assert-is-function' );\nvar trim = require( '@stdlib/string-base-trim' );\nvar str2multislice = require( '@stdlib/slice-base-str2multislice' );\nvar format = require( '@stdlib/string-format' );\nvar hasProperty = require( './has_property.js' );\nvar options = require( './array_options.js' );\nvar RE_INTEGER = require( './re_integer.js' );\n\n\n// MAIN //\n\n/**\n* Trap for retrieving property values.\n*\n* @private\n* @param {Object} target - target object\n* @param {(string|symbol)} property - property name\n* @param {Object} receiver - the proxy object or an object inheriting from the proxy\n* @throws {Error} invalid slice operation\n* @throws {RangeError} number of slice dimensions must match the number of array dimensions\n* @returns {*} result\n*/\nfunction get( target, property, receiver ) {\n\tvar dtype;\n\tvar value;\n\tvar prop;\n\tvar ch;\n\tvar sh;\n\tvar s;\n\tif ( hasProperty( property ) ) {\n\t\tvalue = target[ property ];\n\t\tif ( isFunction( value ) ) {\n\t\t\treturn wrapper;\n\t\t}\n\t\treturn value;\n\t}\n\tprop = trim( property );\n\n\t// Resolve target meta data:\n\tdtype = target.dtype;\n\tsh = target.shape;\n\n\t// Retrieve the first character in order to to detect how a slice operation was specified:\n\tch = prop[ 0 ];\n\n\t// Case: multi-slice\n\tif ( ch === 'M' ) {\n\t\t// Convert the string to a slice object:\n\t\ts = str2multislice( prop );\n\t\tif ( s === null ) {\n\t\t\tthrow new Error( format( 'invalid operation. Unsupported slice operation. Value: `%s`.', property ) );\n\t\t}\n\t\t// TODO: => @stdlib/ndarray/base/slice: return slice( receiver, s.data );\n\n\t\t// Ensure that we were provided an empty multi-slice:\n\t\tif ( s.ndims !== sh.length ) {\n\t\t\tthrow new RangeError( format( 'invalid operation. Number of array dimensions does not match the number of slice dimensions. Array shape: (%s). Slice dimensions: %u.', sh.join( ',' ), s.ndims ) );\n\t\t}\n\t}\n\t// Case: non-empty string\n\telse if ( prop.length !== 0 ) {\n\t\t// TODO: the following can be generalized by going ahead and parsing the slice string or integer and passing to a functional API which then verifies that s.ndims !== sh.length. We need only retain the error raised for an invalid operation.\n\n\t\t// Case: slice or an integer\n\t\tif ( ch === 'S' || RE_INTEGER.test( prop ) ) {\n\t\t\tthrow new RangeError( format( 'invalid operation. Number of array dimensions does not match the number of slice dimensions. Array shape: (%s). Slice dimensions: %u.', sh.join( ',' ), 1 ) );\n\t\t}\n\t\tthrow new Error( format( 'invalid operation. Unsupported slice operation. Value: `%s`.', property ) );\n\t}\n\t// TODO: => @stdlib/ndarray/base/slice: return slice( receiver, [] );\n\n\t// Return an zero-dimensional array view:\n\treturn new receiver.constructor( dtype, target.data, sh, target.strides, target.offset, target.order, options() ); // eslint-disable-line max-len\n\n\t/**\n\t* Method wrapper.\n\t*\n\t* @private\n\t* @returns {*} results\n\t*/\n\tfunction wrapper() {\n\t\tvar args;\n\t\tvar i;\n\n\t\targs = [];\n\t\tfor ( i = 0; i < arguments.length; i++ ) {\n\t\t\targs.push( arguments[ i ] );\n\t\t}\n\t\treturn value.apply( ( this === receiver ) ? target : this, args ); // eslint-disable-line no-invalid-this\n\t}\n}\n\n\n// EXPORTS //\n\nmodule.exports = get;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2023 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar buffer = require( '@stdlib/ndarray-base-buffer' );\nvar zeros = require( '@stdlib/array-base-zeros' );\nvar options = require( './array_options.js' );\n\n\n// MAIN //\n\n/**\n* Returns an empty n-dimensional ndarray.\n*\n* @private\n* @param {Function} ctor - ndarray constructor\n* @param {string} dtype - array data type\n* @param {NonNegativeIntegerArray} shape - array shape\n* @param {string} order - layout order\n* @returns {ndarray} empty ndarray\n*/\nfunction empty( ctor, dtype, shape, order ) {\n\tvar strides;\n\tvar ndims;\n\n\tndims = shape.length;\n\tif ( ndims === 0 ) {\n\t\tstrides = [ 0 ];\n\t} else {\n\t\tstrides = zeros( ndims );\n\t}\n\treturn new ctor( dtype, buffer( dtype, 0 ), shape, strides, 0, order, options() ); // eslint-disable-line max-len\n}\n\n\n// EXPORTS //\n\nmodule.exports = empty;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2023 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar vind2bind = require( '@stdlib/ndarray-base-vind2bind' );\nvar sliceLength = require( '@stdlib/slice-base-length' );\nvar empty = require( './empty.js' );\nvar options = require( './array_options.js' );\n\n\n// MAIN //\n\n/**\n* Returns a view of a one-dimensional array.\n*\n* @private\n* @param {Function} ctor - array constructor\n* @param {string} dtype - array data type\n* @param {Collection} data - underlying data buffer\n* @param {NonNegativeIntegerArray} shape - array shape\n* @param {IntegerArray} strides - array strides\n* @param {NonNegativeInteger} offset - index offset\n* @param {string} order - layout order\n* @param {Slice} slice - slice object\n* @returns {ndarray} ndarray view\n*/\nfunction sliceView( ctor, dtype, data, shape, strides, offset, order, slice ) {\n\tvar start = slice.start;\n\n\t// If the slice does not contain any elements, return an empty one-dimensional array...\n\tif ( start === slice.stop ) { // TODO: replace with assertion utility?\n\t\treturn empty( ctor, dtype, [ 0 ], order );\n\t}\n\t// Compute a new offset (i.e., the position of the starting index in the underlying buffer):\n\toffset = vind2bind( shape, strides, offset, order, start, 'throw' );\n\n\t// Determine the number of elements in the slice:\n\tshape = [ sliceLength( slice ) ];\n\n\t// Compute new array strides:\n\tstrides = [ strides[0]*slice.step ];\n\n\t// Return a one-dimensional view:\n\treturn new ctor( dtype, data, shape, strides, offset, order, options() );\n}\n\n\n// EXPORTS //\n\nmodule.exports = sliceView;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2023 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* eslint-disable max-len */\n\n'use strict';\n\n// MODULES //\n\nvar isFunction = require( '@stdlib/assert-is-function' );\nvar trim = require( '@stdlib/string-base-trim' );\nvar seq2slice = require( '@stdlib/slice-base-seq2slice' );\nvar str2slice = require( '@stdlib/slice-base-str2slice' );\nvar str2multislice = require( '@stdlib/slice-base-str2multislice' );\nvar normalizeSlice = require( '@stdlib/slice-base-normalize-slice' );\nvar normalizeMultiSlice = require( '@stdlib/slice-base-normalize-multi-slice' );\nvar vind2bind = require( '@stdlib/ndarray-base-vind2bind' );\nvar format = require( '@stdlib/string-format' );\nvar hasProperty = require( './has_property.js' );\nvar options = require( './array_options.js' );\nvar RE_INTEGER = require( './re_integer.js' );\nvar sliceView = require( './view.1d.js' );\nvar empty = require( './empty.js' );\n\n\n// MAIN //\n\n/**\n* Trap for retrieving property values.\n*\n* @private\n* @param {Object} target - target object\n* @param {(string|symbol)} property - property name\n* @param {Object} receiver - the proxy object or an object inheriting from the proxy\n* @throws {Error} invalid slice operation\n* @throws {RangeError} number of slice dimensions must match the number of array dimensions\n* @throws {RangeError} slice exceeds array bounds\n* @throws {Error} slice increment must be a non-zero integer\n* @returns {*} result\n*/\nfunction get( target, property, receiver ) {\n\tvar strides;\n\tvar offset;\n\tvar strict;\n\tvar dtype;\n\tvar shape;\n\tvar order;\n\tvar value;\n\tvar parts;\n\tvar prop;\n\tvar ch;\n\tvar s;\n\tif ( hasProperty( property ) ) {\n\t\tvalue = target[ property ];\n\t\tif ( isFunction( value ) ) {\n\t\t\treturn wrapper;\n\t\t}\n\t\treturn value;\n\t}\n\tprop = trim( property );\n\n\t// Resolve target meta data:\n\tdtype = target.dtype;\n\tshape = target.shape;\n\tstrides = target.strides;\n\toffset = target.offset;\n\torder = target.order;\n\tstrict = false; // TODO: support strict mode\n\n\t// Retrieve the first character in order to to detect how a slice operation was specified:\n\tch = prop[ 0 ];\n\n\t// Case: slice\n\tif ( ch === 'S' ) {\n\t\t// Convert the string to a slice object:\n\t\ts = str2slice( property );\n\t\tif ( s === null ) {\n\t\t\tthrow new Error( format( 'invalid operation. Unsupported slice operation. Value: `%s`.', property ) );\n\t\t}\n\t\t// TODO: => @stdlib/ndarray/base/slice: return slice( receiver, [ s ] );\n\n\t\t// Normalize the slice object based on the array length:\n\t\ts = normalizeSlice( s, shape[ 0 ], true );\n\n\t\t// If the slice exceeds array bounds, return an empty one-dimensional array...\n\t\tif ( s.code ) {\n\t\t\tif ( strict ) {\n\t\t\t\tthrow new RangeError( format( 'invalid operation. Slice exceeds array bounds. Array shape: (%s).', shape.join( ',' ) ) );\n\t\t\t}\n\t\t\treturn empty( receiver.constructor, dtype, [ 0 ], order );\n\t\t}\n\t\t// Return a view of the provided array:\n\t\treturn sliceView( receiver.constructor, dtype, target.data, shape, strides, offset, order, s );\n\t}\n\t// Case: multi-slice\n\tif ( ch === 'M' ) {\n\t\t// Convert the string to a slice object:\n\t\ts = str2multislice( prop );\n\t\tif ( s === null ) {\n\t\t\tthrow new Error( format( 'invalid operation. Unsupported slice operation. Value: `%s`.', property ) );\n\t\t}\n\t\t// TODO: => @stdlib/ndarray/base/slice: return slice( receiver, s.data );\n\n\t\t// Ensure that we were provided a one-dimensional multi-slice:\n\t\tif ( s.ndims !== shape.length ) {\n\t\t\tthrow new RangeError( format( 'invalid operation. Number of array dimensions does not match the number of slice dimensions. Array shape: (%s). Slice dimensions: %u.', shape.join( ',' ), s.ndims ) );\n\t\t}\n\t\t// Normalize the slice object based on the array shape:\n\t\ts = normalizeMultiSlice( s, shape, true );\n\n\t\t// If the slice exceeds array bounds, return an empty one-dimensional array...\n\t\tif ( s.code ) {\n\t\t\tif ( strict ) {\n\t\t\t\tthrow new RangeError( format( 'invalid operation. Slice exceeds array bounds. Array shape: (%s).', shape.join( ',' ) ) );\n\t\t\t}\n\t\t\treturn empty( receiver.constructor, dtype, [ 0 ], order );\n\t\t}\n\t\t// Return a view of the provided array:\n\t\treturn sliceView( receiver.constructor, dtype, target.data, shape, strides, offset, order, s.data[ 0 ] );\n\t}\n\t// Case: integer\n\tif ( RE_INTEGER.test( prop ) ) {\n\t\t// Convert the string to a numeric value:\n\t\ts = parseInt( prop, 10 );\n\n\t\t// TODO: => @stdlib/ndarray/base/slice: return slice( receiver, [ s ] );\n\n\t\t// Check whether we need to resolve an index relative to the last array element...\n\t\tif ( s < 0 ) {\n\t\t\ts = shape[ 0 ] + s;\n\n\t\t\t// If the index exceeds array bounds, return an empty zero-dimensional array...\n\t\t\tif ( s < 0 ) {\n\t\t\t\tif ( strict ) {\n\t\t\t\t\tthrow new RangeError( format( 'invalid operation. Slice exceeds array bounds. Array shape: (%s).', shape.join( ',' ) ) );\n\t\t\t\t}\n\t\t\t\treturn empty( receiver.constructor, dtype, [], order );\n\t\t\t}\n\t\t}\n\t\t// If the index exceeds array bounds, return an empty zero-dimensional array...\n\t\telse if ( s >= shape[ 0 ] ) {\n\t\t\tif ( strict ) {\n\t\t\t\tthrow new RangeError( format( 'invalid operation. Slice exceeds array bounds. Array shape: (%s).', shape.join( ',' ) ) );\n\t\t\t}\n\t\t\treturn empty( receiver.constructor, dtype, [], order );\n\t\t}\n\t\t// Compute the index offset for the indexed element:\n\t\toffset = vind2bind( shape, strides, offset, order, s, 'throw' );\n\n\t\t// Return a zero-dimensional array:\n\t\treturn new receiver.constructor( dtype, target.data, [], [ 0 ], offset, order, options() );\n\t}\n\t// Check whether we were provided a multi-dimensional subsequence string...\n\tparts = prop.split( /\\s*,\\s*/ );\n\tif ( parts.length > 1 ) {\n\t\tthrow new RangeError( format( 'invalid operation. Number of array dimensions does not match the number of slice dimensions. Array shape: (%s). Slice dimensions: %u.', shape.join( ',' ), parts.length ) );\n\t}\n\tprop = parts[ 0 ];\n\tif ( prop.length === 0 ) {\n\t\tthrow new RangeError( format( 'invalid operation. Number of array dimensions does not match the number of slice dimensions. Array shape: (%s). Slice dimensions: %u.', shape.join( ',' ), 0 ) );\n\t}\n\t// Attempt to convert the subsequence string to a slice object:\n\ts = seq2slice( prop, shape[ 0 ], true );\n\tif ( s.code ) {\n\t\tif ( s.code === 'ERR_SLICE_OUT_OF_BOUNDS' ) {\n\t\t\tif ( strict ) {\n\t\t\t\tthrow new RangeError( format( 'invalid operation. Slice exceeds array bounds. Array shape: (%s).', shape.join( ',' ) ) );\n\t\t\t}\n\t\t\t// Return an empty zero-dimensional array:\n\t\t\treturn empty( receiver.constructor, dtype, [], order );\n\t\t}\n\t\tif ( s.code === 'ERR_SLICE_INVALID_INCREMENT' ) {\n\t\t\tthrow new Error( format( 'invalid operation. A subsequence increment must be a non-zero integer. Value: `%s`.', property ) );\n\t\t}\n\t\tif ( s.code === 'ERR_SLICE_INVALID_SUBSEQUENCE' ) {\n\t\t\tthrow new Error( format( 'invalid operation. Unsupported slice operation. Value: `%s`.', property ) );\n\t\t}\n\t}\n\t// TODO: => @stdlib/ndarray/base/slice: return slice( receiver, [ s ] );\n\n\t// Return a view of the provided array:\n\treturn sliceView( receiver.constructor, dtype, target.data, shape, strides, offset, order, s );\n\n\t/**\n\t* Method wrapper.\n\t*\n\t* @private\n\t* @returns {*} results\n\t*/\n\tfunction wrapper() {\n\t\tvar args;\n\t\tvar i;\n\n\t\targs = [];\n\t\tfor ( i = 0; i < arguments.length; i++ ) {\n\t\t\targs.push( arguments[ i ] );\n\t\t}\n\t\treturn value.apply( ( this === receiver ) ? target : this, args ); // eslint-disable-line no-invalid-this\n\t}\n}\n\n\n// EXPORTS //\n\nmodule.exports = get;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2023 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MAIN //\n\n/**\n* Regular expression for testing whether a string is a subsequence string.\n*\n* @private\n* @name RE_SUBSEQ\n* @type {RegExp}\n*\n* @example\n* var bool = RE_SUBSEQ.test( '0:10:2' );\n* // returns true\n*\n* @example\n* var bool = RE_SUBSEQ.test( '0' );\n* // returns false\n*\n* @example\n* var bool = RE_SUBSEQ.test( 'Slice(0,10,2)' );\n* // returns false\n*/\nvar RE_SUBSEQ = /:/;\n\n\n// EXPORTS //\n\nmodule.exports = RE_SUBSEQ;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2023 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar sub2ind = require( '@stdlib/ndarray-base-sub2ind' );\n\n\n// MAIN //\n\n/**\n* Resolves the linear index of the first element indexed by a normalized multi-slice.\n*\n* ## Notes\n*\n* -   If `strides` contains negative strides, if an `offset` is greater than `0`, the function returns a linear index with respect to the underlying data buffer. If an `offset` is equal to `0`, the function returns a linear index with respect to the array view. For more information, see `@stdlib/ndarray/base/sub2ind`.\n*\n* @private\n* @param {MultiSlice} slice - normalized multi-slice object\n* @param {NonNegativeIntegerArray} shape - array shape\n* @param {IntegerArray} strides - array strides\n* @param {NonNegativeInteger} offset - index offset\n* @returns {NonNegativeInteger} linear index of the first element\n*/\nfunction sliceStart( slice, shape, strides, offset ) {\n\tvar data;\n\tvar args;\n\tvar i;\n\n\tdata = slice.data;\n\targs = [ shape, strides, offset ];\n\tfor ( i = 0; i < data.length; i++ ) {\n\t\targs.push( data[ i ].start );\n\t}\n\targs.push( 'throw' );\n\treturn sub2ind.apply( null, args );\n}\n\n\n// EXPORTS //\n\nmodule.exports = sliceStart;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2023 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MAIN //\n\n/**\n* Resolves slice strides for a provided normalized multi-slice object.\n*\n* @private\n* @param {MultiSlice} slice - normalized multi-slice object\n* @param {IntegerArray} strides - array strides\n* @param {NonNegativeIntegerArray} sdims - indices of non-reduced dimensions\n* @returns {IntegerArray} slice strides\n*/\nfunction sliceStrides( slice, strides, sdims ) {\n\tvar data;\n\tvar out;\n\tvar i;\n\tvar j;\n\n\tdata = slice.data;\n\tout = [];\n\tfor ( i = 0; i < sdims.length; i++ ) {\n\t\tj = sdims[ i ];\n\t\tout.push( strides[j]*data[j].step );\n\t}\n\treturn out;\n}\n\n\n// EXPORTS //\n\nmodule.exports = sliceStrides;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2023 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar normalizeMultiSlice = require( '@stdlib/slice-base-normalize-multi-slice' );\nvar nonreducedDimensions = require( '@stdlib/slice-base-nonreduced-dimensions' );\nvar sliceShape = require( '@stdlib/slice-base-shape' );\nvar take = require( '@stdlib/array-base-take' );\nvar vind2bind = require( '@stdlib/ndarray-base-vind2bind' );\nvar numel = require( '@stdlib/ndarray-base-numel' );\nvar format = require( '@stdlib/string-format' );\nvar sliceStart = require( './slice_start.js' );\nvar sliceStrides = require( './slice_strides.js' );\nvar options = require( './array_options.js' );\nvar empty = require( './empty.js' );\n\n\n// MAIN //\n\n/**\n* Returns a view of an n-dimensional array.\n*\n* @private\n* @param {Object} target - target object\n* @param {string} property - original property string\n* @param {Object} receiver - the proxy object or an object inheriting from the proxy\n* @param {(MultiSlice|null)} slice - multi-slice object\n* @throws {Error} invalid slice operation\n* @throws {RangeError} number of slice dimensions must match the number of array dimensions\n* @throws {RangeError} slice exceeds array bounds\n* @returns {ndarray} ndarray view\n*/\nfunction sliceView( target, property, receiver, slice ) {\n\tvar strides;\n\tvar offset;\n\tvar strict;\n\tvar dtype;\n\tvar shape;\n\tvar order;\n\tvar sdims;\n\tvar ctor;\n\tvar sh;\n\tvar ns;\n\n\t// Verify that we were successfully able to create a multi-slice:\n\tif ( slice === null ) {\n\t\tthrow new Error( format( 'invalid operation. Unsupported slice operation. Value: `%s`.', property ) );\n\t}\n\t// Retrieve target meta data:\n\tdtype = target.dtype;\n\tshape = target.shape;\n\tstrides = target.strides;\n\toffset = target.offset;\n\torder = target.order;\n\tstrict = false; // TODO: support strict mode\n\n\t// Ensure that the number of array dimensions matches the number of slices:\n\tif ( slice.ndims !== shape.length ) {\n\t\tthrow new RangeError( format( 'invalid operation. Number of array dimensions does not match the number of slice dimensions. Array shape: (%s). Slice dimensions: %u.', shape.join( ',' ), slice.ndims ) );\n\t}\n\t// Normalize the slice object based on the array shape:\n\tns = normalizeMultiSlice( slice, shape, true );\n\n\t// In strict mode, if the slice exceeds array bounds, raise an exception...\n\tif ( ns.code && strict ) {\n\t\tthrow new RangeError( format( 'invalid operation. Slice exceeds array bounds. Array shape: (%s).', shape.join( ',' ) ) );\n\t}\n\t// Resolve the output array constructor:\n\tctor = receiver.constructor;\n\n\t// Compute the slice shape:\n\tsh = sliceShape( ns );\n\n\t// Resolve the indices of the non-reduced dimensions:\n\tsdims = nonreducedDimensions( slice );\n\n\t// If the slice does not contain any elements, return an empty array...\n\tif ( numel( sh ) === 0 ) {\n\t\treturn empty( ctor, dtype, take( sh, sdims ), order );\n\t}\n\t// Resolve the index offset of the first element:\n\toffset = vind2bind( shape, strides, offset, order, sliceStart( ns, shape, strides, 0 ), 'throw' ); // TODO: @stdlib/ndarray/base/sind2bind\n\n\t// Remove reduced dimensions from the slice shape:\n\tsh = take( sh, sdims );\n\n\t// If all dimensions were reduced, return a zero-dimensional array...\n\tif ( sh.length === 0 ) {\n\t\treturn new ctor( dtype, target.data, [], [ 0 ], offset, order, options() ); // eslint-disable-line max-len\n\t}\n\t// Update strides according to slice steps:\n\tstrides = sliceStrides( ns, strides, sdims );\n\n\t// Return a slice view:\n\treturn new ctor( dtype, target.data, sh, strides, offset, order, options() ); // eslint-disable-line max-len\n}\n\n\n// EXPORTS //\n\nmodule.exports = sliceView;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2023 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isFunction = require( '@stdlib/assert-is-function' );\nvar trim = require( '@stdlib/string-base-trim' );\nvar str2multislice = require( '@stdlib/slice-base-str2multislice' );\nvar seq2multislice = require( '@stdlib/slice-base-seq2multislice' );\nvar sargs2multislice = require( '@stdlib/slice-base-sargs2multislice' );\nvar format = require( '@stdlib/string-format' );\nvar hasProperty = require( './has_property.js' );\nvar RE_SUBSEQ = require( './re_subseq.js' );\nvar sliceView = require( './view.nd.js' );\nvar empty = require( './empty.js' );\n\n\n// FUNCTIONS //\n\n/**\n* Trap for retrieving property values.\n*\n* @private\n* @param {Object} target - target object\n* @param {(string|symbol)} property - property name\n* @param {Object} receiver - the proxy object or an object inheriting from the proxy\n* @throws {Error} invalid slice operation\n* @throws {RangeError} number of slice dimensions must match the number of array dimensions\n* @throws {RangeError} slice exceeds array bounds\n* @throws {Error} slice increment must be a non-zero integer\n* @returns {*} result\n*/\nfunction get( target, property, receiver ) {\n\tvar strict;\n\tvar shape;\n\tvar value;\n\tvar prop;\n\tvar ch;\n\tvar s;\n\n\tif ( hasProperty( property ) ) {\n\t\tvalue = target[ property ];\n\t\tif ( isFunction( value ) ) {\n\t\t\treturn wrapper;\n\t\t}\n\t\treturn value;\n\t}\n\tprop = trim( property );\n\n\t// Resolve target meta data:\n\tstrict = false; // TODO: support strict mode\n\n\t// Retrieve the first character in order to to detect how a slice operation was specified:\n\tch = prop[ 0 ];\n\n\t// Case: multi-slice (e.g., 'MultiSlice(Slice(0,10,2),null,2,Slice(10,5,-1))')\n\tif ( ch === 'M' ) {\n\t\t// TODO: => @stdlib/ndarray/base/slice: return slice( receiver, str2multislice( prop ).data ); // TODO: handle `null`\n\n\t\treturn sliceView( target, property, receiver, str2multislice( prop ) );\n\t}\n\t// Case: subsequence string (e.g., ':10,1,::-1,:,-5,2::3')\n\tif ( RE_SUBSEQ.test( prop ) ) {\n\t\tshape = target.shape;\n\t\ts = seq2multislice( prop, shape, true );\n\t\tif ( s.code ) {\n\t\t\tif ( s.code === 'ERR_SLICE_OUT_OF_BOUNDS' ) {\n\t\t\t\tif ( strict ) {\n\t\t\t\t\tthrow new RangeError( format( 'invalid operation. Slice exceeds array bounds. Array shape: (%s).', shape.join( ',' ) ) );\n\t\t\t\t}\n\t\t\t\t// Return an empty zero-dimensional array:\n\t\t\t\treturn empty( receiver.constructor, target.dtype, [], target.order );\n\t\t\t}\n\t\t\tif ( s.code === 'ERR_SLICE_INVALID_INCREMENT' ) {\n\t\t\t\tthrow new Error( format( 'invalid operation. A subsequence increment must be a non-zero integer. Value: `%s`.', property ) );\n\t\t\t}\n\t\t\tif ( s.code === 'ERR_SLICE_INVALID_ELLIPSIS' ) {\n\t\t\t\tthrow new Error( format( 'invalid operation. A subsequence may only include a single ellipsis. Value: `%s`.', property ) );\n\t\t\t}\n\t\t\tif ( s.code === 'ERR_SLICE_INVALID_SUBSEQUENCE' ) {\n\t\t\t\tthrow new Error( format( 'invalid operation. Unsupported slice operation. Value: `%s`.', property ) );\n\t\t\t}\n\t\t}\n\t\t// TODO: => @stdlib/ndarray/base/slice: return slice( receiver, s.data );\n\n\t\treturn sliceView( target, property, receiver, s );\n\t}\n\t// Case: array syntax (e.g., [ Slice(0,10,1), null, Slice(4,null,-1) ])\n\n\t// TODO: => @stdlib/ndarray/base/slice: return slice( receiver, sargs2multislice( prop ).data ); // TODO: handle `null`\n\n\treturn sliceView( target, '['+property+']', receiver, sargs2multislice( prop ) );\n\n\t/**\n\t* Method wrapper.\n\t*\n\t* @private\n\t* @returns {*} results\n\t*/\n\tfunction wrapper() {\n\t\tvar args;\n\t\tvar i;\n\n\t\targs = [];\n\t\tfor ( i = 0; i < arguments.length; i++ ) {\n\t\t\targs.push( arguments[ i ] );\n\t\t}\n\t\treturn value.apply( ( this === receiver ) ? target : this, args ); // eslint-disable-line no-invalid-this\n\t}\n}\n\n\n// EXPORTS //\n\nmodule.exports = get;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2023 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* eslint-disable max-len */\n\n'use strict';\n\n// MODULES //\n\nvar setReadOnly = require( '@stdlib/utils-define-nonenumerable-read-only-property' );\nvar parent = require( '@stdlib/ndarray-ctor' ); // eslint-disable-line stdlib/no-redeclare\nvar inherit = require( '@stdlib/utils-inherit' );\nvar Proxy = require( '@stdlib/proxy-ctor' );\nvar get0d = require( './get.0d.js' );\nvar get1d = require( './get.1d.js' );\nvar getnd = require( './get.nd.js' );\n\n\n// MAIN //\n\n/**\n* Fancy ndarray constructor.\n*\n* @constructor\n* @param {string} dtype - data type\n* @param {Collection} buffer - data buffer\n* @param {NonNegativeIntegerArray} shape - array shape\n* @param {IntegerArray} strides - array strides\n* @param {NonNegativeInteger} offset - index offset\n* @param {string} order - specifies whether an array is row-major (C-style) or column-major (Fortran-style)\n* @param {Options} [options] - function options\n* @param {string} [options.mode=\"throw\"] - specifies how to handle indices which exceed array dimensions\n* @param {StringArray} [options.submode=[\"throw\"]] - specifies how to handle subscripts which exceed array dimensions on a per dimension basis\n* @param {boolean} [options.readonly=false] - boolean indicating whether an array should be read-only\n* @throws {TypeError} `dtype` argument must be a supported ndarray data type\n* @throws {TypeError} `buffer` argument must be an array-like object, typed-array-like, or a Buffer\n* @throws {TypeError} `buffer` argument `get` and `set` properties must be functions\n* @throws {TypeError} `shape` argument must be an array-like object containing nonnegative integers\n* @throws {Error} `shape` argument length must equal the number of dimensions\n* @throws {TypeError} `strides` argument must be an array-like object containing integers\n* @throws {Error} `strides` argument length must equal the number of dimensions (except for zero-dimensional arrays; in which case, the `strides` argument length must be equal to `1`)\n* @throws {Error} for zero-dimensional ndarrays, the `strides` argument must contain a single element equal to `0`\n* @throws {TypeError} `offset` argument must be a nonnegative integer\n* @throws {TypeError} `order` argument must be a supported ndarray order\n* @throws {Error} `buffer` argument must be compatible with specified meta data\n* @throws {TypeError} options argument must be an object\n* @throws {TypeError} must provide valid options\n* @throws {RangeError} too many dimensions\n* @returns {FancyArray} FancyArray instance\n*\n* @example\n* var buffer = [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0 ];\n* var shape = [ 3, 2 ];\n* var strides = [ 2, 1 ];\n* var offset = 0;\n*\n* var out = new FancyArray( 'generic', buffer, shape, strides, offset, 'row-major' );\n* // returns <FancyArray>\n*/\nfunction FancyArray( dtype, buffer, shape, strides, offset, order, options ) {\n\tvar handlers;\n\tvar nargs;\n\tvar ndims;\n\n\tnargs = arguments.length;\n\tif ( !( this instanceof FancyArray ) ) {\n\t\tif ( nargs < 7 ) {\n\t\t\treturn new FancyArray( dtype, buffer, shape, strides, offset, order );\n\t\t}\n\t\treturn new FancyArray( dtype, buffer, shape, strides, offset, order, options );\n\t}\n\t// Call the parent constructor:\n\tparent.call( this, dtype, buffer, shape, strides, offset, order, ( nargs < 7 ) ? {} : options );\n\n\tif ( Proxy ) { // NOTE: cannot use `@stdlib/assert/has-proxy-support` here, as that API uses code evaluation and might violate CSPs\n\t\tndims = shape.length;\n\t\thandlers = {};\n\t\tif ( ndims === 0 ) {\n\t\t\thandlers.get = get0d;\n\t\t} else if ( ndims === 1 ) {\n\t\t\thandlers.get = get1d;\n\t\t} else {\n\t\t\thandlers.get = getnd;\n\t\t}\n\t\treturn new Proxy( this, handlers );\n\t}\n\t// TODO: replace with `@stdlib/console/warn` (or equivalent once available)\n\tconsole.warn( 'WARNING: Proxy objects are not supported in the current environment. Some `FancyArray` functionality may not be available.' ); // eslint-disable-line no-console\n\treturn this;\n}\n\n// Inherit from the parent constructor:\ninherit( FancyArray, parent );\n\n/**\n* Constructor name.\n*\n* @name name\n* @memberof FancyArray\n* @type {string}\n* @default 'ndarray'\n*\n* @example\n* var str = FancyArray.name;\n* // returns 'ndarray'\n*/\nsetReadOnly( FancyArray, 'name', 'ndarray' );\n\n\n// EXPORTS //\n\nmodule.exports = FancyArray;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2023 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Fancy array constructor.\n*\n* @module @stdlib/ndarray-fancy\n*\n* @example\n* var FancyArray = require( '@stdlib/ndarray-fancy' );\n*\n* var buffer = [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0 ];\n* var shape = [ 3, 2 ];\n* var strides = [ 2, 1 ];\n* var offset = 0;\n*\n* var out = new FancyArray( 'generic', buffer, shape, strides, offset, 'row-major' );\n* // returns <FancyArray>\n*/\n\n// MODULES //\n\nvar main = require( './main.js' );\n\n\n// EXPORTS //\n\nmodule.exports = main;\n"],
  "mappings": "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",
  "names": ["require_has_property", "__commonJSMin", "exports", "module", "propertiesIn", "contains", "ndarray", "defaults", "hasProperty", "require_array_options", "__commonJSMin", "exports", "module", "options", "require_re_integer", "__commonJSMin", "exports", "module", "RE_INTEGER", "require_get_0d", "__commonJSMin", "exports", "module", "isFunction", "trim", "str2multislice", "format", "hasProperty", "options", "RE_INTEGER", "get", "target", "property", "receiver", "dtype", "value", "prop", "ch", "sh", "s", "wrapper", "args", "i", "require_empty", "__commonJSMin", "exports", "module", "buffer", "zeros", "options", "empty", "ctor", "dtype", "shape", "order", "strides", "ndims", "require_view_1d", "__commonJSMin", "exports", "module", "vind2bind", "sliceLength", "empty", "options", "sliceView", "ctor", "dtype", "data", "shape", "strides", "offset", "order", "slice", "start", "require_get_1d", "__commonJSMin", "exports", "module", "isFunction", "trim", "seq2slice", "str2slice", "str2multislice", "normalizeSlice", "normalizeMultiSlice", "vind2bind", "format", "hasProperty", "options", "RE_INTEGER", "sliceView", "empty", "get", "target", "property", "receiver", "strides", "offset", "strict", "dtype", "shape", "order", "value", "parts", "prop", "ch", "s", "wrapper", "args", "i", "require_re_subseq", "__commonJSMin", "exports", "module", "RE_SUBSEQ", "require_slice_start", "__commonJSMin", "exports", "module", "sub2ind", "sliceStart", "slice", "shape", "strides", "offset", "data", "args", "i", "require_slice_strides", "__commonJSMin", "exports", "module", "sliceStrides", "slice", "strides", "sdims", "data", "out", "j", "require_view_nd", "__commonJSMin", "exports", "module", "normalizeMultiSlice", "nonreducedDimensions", "sliceShape", "take", "vind2bind", "numel", "format", "sliceStart", "sliceStrides", "options", "empty", "sliceView", "target", "property", "receiver", "slice", "strides", "offset", "strict", "dtype", "shape", "order", "sdims", "ctor", "sh", "ns", "require_get_nd", "__commonJSMin", "exports", "module", "isFunction", "trim", "str2multislice", "seq2multislice", "sargs2multislice", "format", "hasProperty", "RE_SUBSEQ", "sliceView", "empty", "get", "target", "property", "receiver", "strict", "shape", "value", "prop", "ch", "s", "wrapper", "args", "i", "require_main", "__commonJSMin", "exports", "module", "setReadOnly", "parent", "inherit", "Proxy", "get0d", "get1d", "getnd", "FancyArray", "dtype", "buffer", "shape", "strides", "offset", "order", "options", "handlers", "nargs", "ndims", "main"]
}
