// Copyright (c) 2023 The Stdlib Authors. License is Apache-2.0: http://www.apache.org/licenses/LICENSE-2.0
/// <reference types="./index.d.ts" />
import e from"https://cdn.jsdelivr.net/gh/stdlib-js/utils-define-nonenumerable-read-only-property@v0.1.0-esm/index.mjs";import t from"https://cdn.jsdelivr.net/gh/stdlib-js/ndarray-ctor@esm/index.mjs";import s from"https://cdn.jsdelivr.net/gh/stdlib-js/utils-inherit@v0.1.1-esm/index.mjs";import r from"https://cdn.jsdelivr.net/gh/stdlib-js/proxy-ctor@v0.1.1-esm/index.mjs";import i from"https://cdn.jsdelivr.net/gh/stdlib-js/string-base-trim@v0.1.1-esm/index.mjs";import n from"https://cdn.jsdelivr.net/gh/stdlib-js/string-base-replace@v0.1.1-esm/index.mjs";import o from"https://cdn.jsdelivr.net/gh/stdlib-js/slice-multi@v0.1.0-esm/index.mjs";import a from"https://cdn.jsdelivr.net/gh/stdlib-js/slice-base-str2multislice@v0.1.0-esm/index.mjs";import d from"https://cdn.jsdelivr.net/gh/stdlib-js/slice-base-seq2multislice@v0.1.0-esm/index.mjs";import l from"https://cdn.jsdelivr.net/gh/stdlib-js/slice-base-str2slice@v0.1.0-esm/index.mjs";import p from"https://cdn.jsdelivr.net/gh/stdlib-js/error-tools-fmtprodmsg@v0.1.1-esm/index.mjs";import m from"https://cdn.jsdelivr.net/gh/stdlib-js/slice-base-sargs2multislice@v0.2.0-esm/index.mjs";import c from"https://cdn.jsdelivr.net/gh/stdlib-js/utils-properties-in@v0.1.0-esm/index.mjs";import{factory as h}from"https://cdn.jsdelivr.net/gh/stdlib-js/array-base-assert-contains@v0.1.0-esm/index.mjs";import f from"https://cdn.jsdelivr.net/gh/stdlib-js/ndarray-defaults@v0.1.1-esm/index.mjs";import u from"https://cdn.jsdelivr.net/gh/stdlib-js/assert-is-function@v0.1.1-esm/index.mjs";import v from"https://cdn.jsdelivr.net/gh/stdlib-js/ndarray-base-slice@v0.1.0-esm/index.mjs";import j from"https://cdn.jsdelivr.net/gh/stdlib-js/assert-is-range-error@v0.1.1-esm/index.mjs";import y from"https://cdn.jsdelivr.net/gh/stdlib-js/assert-is-type-error@v0.1.1-esm/index.mjs";import g from"https://cdn.jsdelivr.net/gh/stdlib-js/assert-is-syntax-error@v0.1.1-esm/index.mjs";import b from"https://cdn.jsdelivr.net/gh/stdlib-js/ndarray-base-slice-assign@v0.1.0-esm/index.mjs";import E from"https://cdn.jsdelivr.net/gh/stdlib-js/assert-is-ndarray-like@v0.1.0-esm/index.mjs";import{isPrimitive as w}from"https://cdn.jsdelivr.net/gh/stdlib-js/assert-is-number@v0.1.1-esm/index.mjs";import{isPrimitive as x}from"https://cdn.jsdelivr.net/gh/stdlib-js/assert-is-integer@v0.1.0-esm/index.mjs";import I from"https://cdn.jsdelivr.net/gh/stdlib-js/assert-is-complex-like@v0.1.1-esm/index.mjs";import _ from"https://cdn.jsdelivr.net/gh/stdlib-js/ndarray-base-assert-is-complex-floating-point-data-type@v0.1.0-esm/index.mjs";import S from"https://cdn.jsdelivr.net/gh/stdlib-js/ndarray-base-assert-is-floating-point-data-type@v0.1.0-esm/index.mjs";import R from"https://cdn.jsdelivr.net/gh/stdlib-js/ndarray-base-assert-is-unsigned-integer-data-type@v0.1.0-esm/index.mjs";import A from"https://cdn.jsdelivr.net/gh/stdlib-js/ndarray-base-assert-is-signed-integer-data-type@v0.1.0-esm/index.mjs";import N from"https://cdn.jsdelivr.net/gh/stdlib-js/ndarray-base-assert-is-safe-data-type-cast@v0.1.0-esm/index.mjs";import L from"https://cdn.jsdelivr.net/gh/stdlib-js/constants-int8-max@v0.1.1-esm/index.mjs";import V from"https://cdn.jsdelivr.net/gh/stdlib-js/constants-int16-max@v0.1.1-esm/index.mjs";import U from"https://cdn.jsdelivr.net/gh/stdlib-js/constants-int32-max@v0.1.1-esm/index.mjs";import D from"https://cdn.jsdelivr.net/gh/stdlib-js/ndarray-min-dtype@v0.1.1-esm/index.mjs";import C from"https://cdn.jsdelivr.net/gh/stdlib-js/complex-dtype@v0.1.1-esm/index.mjs";import T from"https://cdn.jsdelivr.net/gh/stdlib-js/ndarray-from-scalar@v0.1.0-esm/index.mjs";var O=/^-?[0-9]+$/,M=/:/;function q(e,t){var s,r,m,c;if("S"===(m=(r=i(t))[0])){if(null===(c=l(t)))throw new Error(p("invalid operation. Unsupported slice operation. Value: `%s`.",t));c=new o(c)}else if("M"===m){if(null===(c=a(r)))throw new Error(p("invalid operation. Unsupported slice operation. Value: `%s`.",t))}else if(O.test(r))c=parseInt(r,10),c=new o(c);else if(M.test(r)){if(s=e.shape,(c=d(r,s,!0)).code){if("ERR_SLICE_INVALID_INCREMENT"===c.code)throw new Error(p("invalid operation. A subsequence increment must be a non-zero integer. Value: `%s`.",t));if("ERR_SLICE_INVALID_ELLIPSIS"===c.code)throw new Error(p("invalid operation. A subsequence may only include a single ellipsis. Value: `%s`.",t));if("ERR_SLICE_INVALID_SUBSEQUENCE"===c.code)throw new Error(p("invalid operation. Unsupported slice operation. Value: `%s`.",t));throw new RangeError(p("invalid operation. Number of slice dimensions does not match the number of array dimensions. Array shape: (%s). Slice dimensions: %u.",s.join(","),n(r,/\.\.\.,/,"").split(",").length))}}else{if(0!==r.length&&"..."!==r)throw new Error(p("invalid operation. Unsupported slice operation. Value: `%s`.",t));c=new o}return c}function B(e,t,s){var r,m,c,h;if("S"===(c=(m=i(t))[0])){if(null===(h=l(t)))throw new Error(p("invalid operation. Unsupported slice operation. Value: `%s`.",t));h=new o(h)}else if("M"===c){if(null===(h=a(m)))throw new Error(p("invalid operation. Unsupported slice operation. Value: `%s`.",t))}else if(O.test(m))h=parseInt(m,10),h=new o(h);else{if(!(m.length>0))throw new RangeError(p("invalid operation. Number of slice dimensions does not match the number of array dimensions. Array shape: (%s). Slice dimensions: %u.",e.shape.join(","),0));if(r=e.shape,(h=d(m,r,!0)).code){if("ERR_SLICE_INVALID_INCREMENT"===h.code)throw new Error(p("invalid operation. A subsequence increment must be a non-zero integer. Value: `%s`.",t));if("ERR_SLICE_INVALID_ELLIPSIS"===h.code)throw new Error(p("invalid operation. A subsequence may only include a single ellipsis. Value: `%s`.",t));if("ERR_SLICE_INVALID_SUBSEQUENCE"===h.code)throw new Error(p("invalid operation. Unsupported slice operation. Value: `%s`.",t));if("ERR_SLICE_TOO_MANY_DIMENSIONS"===h.code)throw new RangeError(p("invalid operation. Number of slice dimensions does not match the number of array dimensions. Array shape: (%s). Slice dimensions: %u.",e.shape.join(","),n(m,/\.\.\.,/,"").split(",").length));if("ERR_SLICE_OUT_OF_BOUNDS"===h.code){if(s)throw new RangeError(p("invalid operation. Slice exceeds array bounds. Array shape: (%s).",r.join(",")));h=d(m,r,!1)}}}return h}function P(e,t,s){var r,n,o;if("M"===(n=i(t))[0]){if(null===(o=a(n)))throw new Error(p("invalid operation. Unsupported slice operation. Value: `%s`.",t))}else if(M.test(n)||"..."===n){if(r=e.shape,(o=d(n,r,!0)).code){if("ERR_SLICE_INVALID_INCREMENT"===o.code)throw new Error(p("invalid operation. A subsequence increment must be a non-zero integer. Value: `%s`.",t));if("ERR_SLICE_INVALID_ELLIPSIS"===o.code)throw new Error(p("invalid operation. A subsequence may only include a single ellipsis. Value: `%s`.",t));if("ERR_SLICE_INVALID_SUBSEQUENCE"===o.code)throw new Error(p("invalid operation. Unsupported slice operation. Value: `%s`.",t));if("ERR_SLICE_OUT_OF_BOUNDS"===o.code){if(s)throw new RangeError(p("invalid operation. Slice exceeds array bounds. Array shape: (%s).",r.join(",")));o=d(n,r,!1)}}}else if(null===(o=m(n)))throw new Error(p("invalid operation. Unsupported slice operation. Value: `%s`.",t));return o}var z=h(c(new t("generic",[0],[],[0],0,f.get("order"))));function F(e){return n(e,/^invalid argument/,"invalid operation")}function Q(e){return j(e)?RangeError:y(e)?TypeError:g(e)?SyntaxError:Error}function k(e){return function(t,s,r){if(z(s))return function(e,t,s){var r=e[t];return u(r)?function(){var t,i;for(t=[],i=0;i<arguments.length;i++)t.push(arguments[i]);return r.apply(this===s?e:this,t)}:r}(t,s,r);return function(e,t,s,r){var i;i=r(e,t,!1);try{return v(s,i,!1,!1)}catch(e){throw new(Q(e))(F(e.message))}}(t,s,r,e)}}function G(e){return{dtype:e}}function W(e){return function(t,s,r,i){if(z(s))return function(e,t,s){return e[t]=s,!0}(t,s,r);return function(e,t,s,r,i){var n,o,a;if(!E(s))if("generic"===(o=e.dtype))s=T(s,G(o));else if(w(s))if(S(o))s=T(s,G(o));else if(R(o)){if(n=D(s),!N(n,o))throw new TypeError(p("invalid operation. Assigned value cannot be safely cast to the target array data type. Data types: [%s, %s].",n,o));s=T(s,G(o))}else if(A(o)){if(!x(s))throw new TypeError(p("invalid operation. Assigned value cannot be safely cast to the target array data type. Data types: [%s, %s].",D(s),o));if(n=s<0?D(s):s<=L?"int8":s<=V?"int16":s<=U?"int32":"float64",!N(n,o))throw new TypeError(p("invalid operation. Assigned value cannot be safely cast to the target array data type. Data types: [%s, %s].",n,o));s=T(s,G(o))}else{if("binary"!==o)throw new TypeError(p("invalid operation. Unsupported target array data type. Data type: `%s`.",o));if("uint8"!==(n=D(s)))throw new TypeError(p("invalid operation. Assigned value cannot be safely cast to the target array data type. Data types: [%s, %s].",n,o));s=T(s,G(o))}else{if(!I(s))throw new TypeError(p("invalid operation. Assigned value cannot be safely cast to the target array data type. Data types: [%s, %s].",typeof s,o));if(!_(o))throw new TypeError(p("invalid operation. Assigned value cannot be safely cast to the target array data type. Data types: [%s, %s].",C(s),o));s=T(s,G(o))}a=i(e,t,!1);try{return b(s,r,a,!1),!0}catch(e){throw new(Q(e))(F(e.message))}}(t,s,r,i,e)}}var Y=k(q),$=W(q),H=k(B),J=W(B),K=k(P),X=W(P);function Z(e,s,i,n,o,a,d){var l,p,m;return p=arguments.length,this instanceof Z?(t.call(this,e,s,i,n,o,a,p<7?{}:d),r?(l={},0===(m=i.length)?(l.get=Y,l.set=$):1===m?(l.get=H,l.set=J):(l.get=K,l.set=X),new r(this,l)):(console.warn("WARNING: Proxy objects are not supported in the current environment. Some `FancyArray` functionality may not be available."),this)):p<7?new Z(e,s,i,n,o,a):new Z(e,s,i,n,o,a,d)}s(Z,t),e(Z,"name","ndarray");export{Z as default};
//# sourceMappingURL=index.mjs.map
