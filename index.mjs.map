{"version":3,"file":"index.mjs","sources":["../lib/error_message.js","../lib/error_constructor.js","../lib/has_property.js","../lib/re_integer.js","../lib/re_subseq.js","../lib/get.0d.js","../lib/get.1d.js","../lib/get.nd.js","../lib/main.js"],"sourcesContent":["/**\n* @license Apache-2.0\n*\n* Copyright (c) 2023 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport replace from '@stdlib/string-base-replace';\n\n\n// MAIN //\n\n/**\n* Returns an updated error message for trapped errors.\n*\n* @private\n* @param {string} msg - error message\n* @returns {string} updated message\n*/\nfunction errMessage( msg ) {\n\treturn replace( msg, /^invalid argument/, 'invalid operation' );\n}\n\n\n// EXPORTS //\n\nexport default errMessage;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2023 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isRangeError from '@stdlib/assert-is-range-error';\nimport isTypeError from '@stdlib/assert-is-type-error';\nimport isSyntaxError from '@stdlib/assert-is-syntax-error';\n\n\n// MAIN //\n\n/**\n* Returns the error constructor for a provided error object.\n*\n* @private\n* @param {Error} err - error object\n* @returns {Function} error constructor\n*/\nfunction errConstructor( err ) {\n\tif ( isRangeError( err ) ) {\n\t\treturn RangeError;\n\t}\n\tif ( isTypeError( err ) ) {\n\t\treturn TypeError;\n\t}\n\tif ( isSyntaxError( err ) ) {\n\t\treturn SyntaxError;\n\t}\n\treturn Error;\n}\n\n\n// EXPORTS //\n\nexport default errConstructor;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2023 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport propertiesIn from '@stdlib/utils-properties-in';\nimport { factory as contains } from '@stdlib/array-base-assert-contains';\nimport ndarray from '@stdlib/ndarray-ctor';\nimport defaults from '@stdlib/ndarray-defaults';\n\n\n// MAIN //\n\n/**\n* Tests whether a property name exists on the parent prototype.\n*\n* @private\n* @name hasProperty\n* @type {Function}\n* @param {(string|symbol)} name - property name\n* @returns {boolean} boolean indicating whether the property exists on the parent prototype\n*\n* @example\n* var bool = hasProperty( 'get' );\n* // returns true\n*\n* bool = hasProperty( 'foo' );\n* // returns false\n*/\nvar hasProperty = contains( propertiesIn( new ndarray( 'generic', [ 0 ], [], [ 0 ], 0, defaults.get( 'order' ) ) ) );\n\n\n// EXPORTS //\n\nexport default hasProperty;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2023 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MAIN //\n\n/**\n* Regular expression for testing whether a string is an integer string.\n*\n* @private\n* @name RE_INTEGER\n* @type {RegExp}\n*\n* @example\n* var bool = RE_INTEGER.test( '10' );\n* // returns true\n*\n* @example\n* var bool = RE_INTEGER.test( '-1' );\n* // returns true\n*\n* @example\n* var bool = RE_INTEGER.test( '0:10:2' );\n* // returns false\n*/\nvar RE_INTEGER = /^-?[0-9]+$/;\n\n\n// EXPORTS //\n\nexport default RE_INTEGER;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2023 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MAIN //\n\n/**\n* Regular expression for testing whether a string is a subsequence string.\n*\n* @private\n* @name RE_SUBSEQ\n* @type {RegExp}\n*\n* @example\n* var bool = RE_SUBSEQ.test( '0:10:2' );\n* // returns true\n*\n* @example\n* var bool = RE_SUBSEQ.test( '0' );\n* // returns false\n*\n* @example\n* var bool = RE_SUBSEQ.test( 'Slice(0,10,2)' );\n* // returns false\n*/\nvar RE_SUBSEQ = /:/;\n\n\n// EXPORTS //\n\nexport default RE_SUBSEQ;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2023 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isFunction from '@stdlib/assert-is-function';\nimport trim from '@stdlib/string-base-trim';\nimport replace from '@stdlib/string-base-replace';\nimport MultiSlice from '@stdlib/slice-multi';\nimport str2multislice from '@stdlib/slice-base-str2multislice';\nimport seq2multislice from '@stdlib/slice-base-seq2multislice';\nimport str2slice from '@stdlib/slice-base-str2slice';\nimport slice from '@stdlib/ndarray-base-slice';\nimport format from '@stdlib/error-tools-fmtprodmsg';\nimport errMessage from './error_message.js';\nimport errConstructor from './error_constructor.js';\nimport hasProperty from './has_property.js';\nimport RE_INTEGER from './re_integer.js';\nimport RE_SUBSEQ from './re_subseq.js';\n\n\n// MAIN //\n\n/**\n* Trap for retrieving property values.\n*\n* @private\n* @param {Object} target - target object\n* @param {(string|symbol)} property - property name\n* @param {Object} receiver - the proxy object or an object inheriting from the proxy\n* @throws {Error} invalid slice operation\n* @throws {RangeError} number of slice dimensions must match the number of array dimensions\n* @returns {*} result\n*/\nfunction get( target, property, receiver ) { // eslint-disable-line stdlib/jsdoc-require-throws-tags\n\tvar value;\n\tvar shape;\n\tvar prop;\n\tvar ch;\n\tvar E;\n\tvar s;\n\tif ( hasProperty( property ) ) {\n\t\tvalue = target[ property ];\n\t\tif ( isFunction( value ) ) {\n\t\t\treturn wrapper;\n\t\t}\n\t\treturn value;\n\t}\n\tprop = trim( property );\n\n\t// Retrieve the first character in order to to detect how a slice operation was specified:\n\tch = prop[ 0 ];\n\n\t// Case: slice\n\tif ( ch === 'S' ) {\n\t\t// Convert the string to a slice object:\n\t\ts = str2slice( property );\n\t\tif ( s === null ) {\n\t\t\tthrow new Error( format( 'invalid operation. Unsupported slice operation. Value: `%s`.', property ) );\n\t\t}\n\t\t// Create a multi-slice:\n\t\ts = new MultiSlice( s );\n\t}\n\t// Case: multi-slice\n\telse if ( ch === 'M' ) {\n\t\t// Convert the string to a slice object:\n\t\ts = str2multislice( prop );\n\t\tif ( s === null ) {\n\t\t\tthrow new Error( format( 'invalid operation. Unsupported slice operation. Value: `%s`.', property ) );\n\t\t}\n\t}\n\t// Case: integer\n\telse if ( RE_INTEGER.test( prop ) ) {\n\t\t// Convert the string to a numeric value:\n\t\ts = parseInt( prop, 10 );\n\n\t\t// Create a multi-slice:\n\t\ts = new MultiSlice( s );\n\t}\n\t// Case: subsequence string (e.g., ':10,1,::-1,:,-5,2::3')\n\telse if ( RE_SUBSEQ.test( prop ) ) {\n\t\tshape = target.shape;\n\t\ts = seq2multislice( prop, shape, true );\n\t\tif ( s.code ) {\n\t\t\tif ( s.code === 'ERR_SLICE_INVALID_INCREMENT' ) {\n\t\t\t\tthrow new Error( format( 'invalid operation. A subsequence increment must be a non-zero integer. Value: `%s`.', property ) );\n\t\t\t}\n\t\t\tif ( s.code === 'ERR_SLICE_INVALID_ELLIPSIS' ) {\n\t\t\t\tthrow new Error( format( 'invalid operation. A subsequence may only include a single ellipsis. Value: `%s`.', property ) );\n\t\t\t}\n\t\t\tif ( s.code === 'ERR_SLICE_INVALID_SUBSEQUENCE' ) {\n\t\t\t\tthrow new Error( format( 'invalid operation. Unsupported slice operation. Value: `%s`.', property ) );\n\t\t\t}\n\t\t\t// s.code === 'ERR_SLICE_TOO_MANY_DIMENSIONS'\n\t\t\tthrow new RangeError( format( 'invalid operation. Number of slice dimensions does not match the number of array dimensions. Array shape: (%s). Slice dimensions: %u.', shape.join( ',' ), replace( prop, /\\.\\.\\.,/, '' ).split( ',' ).length ) );\n\t\t}\n\t}\n\t// Case: empty string or ellipsis\n\telse if ( prop.length === 0 || prop === '...' ) {\n\t\ts = new MultiSlice();\n\t}\n\t// Case: non-empty string\n\telse {\n\t\tthrow new Error( format( 'invalid operation. Unsupported slice operation. Value: `%s`.', property ) );\n\t}\n\ttry {\n\t\treturn slice( receiver, s, true );\n\t} catch ( err ) {\n\t\tE = errConstructor( err );\n\t\tthrow new E( errMessage( err.message ) );\n\t}\n\n\t/**\n\t* Method wrapper.\n\t*\n\t* @private\n\t* @returns {*} results\n\t*/\n\tfunction wrapper() {\n\t\tvar args;\n\t\tvar i;\n\n\t\targs = [];\n\t\tfor ( i = 0; i < arguments.length; i++ ) {\n\t\t\targs.push( arguments[ i ] );\n\t\t}\n\t\treturn value.apply( ( this === receiver ) ? target : this, args ); // eslint-disable-line no-invalid-this\n\t}\n}\n\n\n// EXPORTS //\n\nexport default get;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2023 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isFunction from '@stdlib/assert-is-function';\nimport trim from '@stdlib/string-base-trim';\nimport replace from '@stdlib/string-base-replace';\nimport MultiSlice from '@stdlib/slice-multi';\nimport str2slice from '@stdlib/slice-base-str2slice';\nimport str2multislice from '@stdlib/slice-base-str2multislice';\nimport seq2multislice from '@stdlib/slice-base-seq2multislice';\nimport slice from '@stdlib/ndarray-base-slice';\nimport format from '@stdlib/error-tools-fmtprodmsg';\nimport errMessage from './error_message.js';\nimport errConstructor from './error_constructor.js';\nimport hasProperty from './has_property.js';\nimport RE_INTEGER from './re_integer.js';\n\n\n// MAIN //\n\n/**\n* Trap for retrieving property values.\n*\n* @private\n* @param {Object} target - target object\n* @param {(string|symbol)} property - property name\n* @param {Object} receiver - the proxy object or an object inheriting from the proxy\n* @throws {Error} invalid slice operation\n* @throws {RangeError} number of slice dimensions must match the number of array dimensions\n* @throws {RangeError} slice exceeds array bounds\n* @throws {Error} slice increment must be a non-zero integer\n* @returns {*} result\n*/\nfunction get( target, property, receiver ) { // eslint-disable-line stdlib/jsdoc-require-throws-tags\n\tvar strict;\n\tvar shape;\n\tvar value;\n\tvar prop;\n\tvar ch;\n\tvar E;\n\tvar s;\n\n\tif ( hasProperty( property ) ) {\n\t\tvalue = target[ property ];\n\t\tif ( isFunction( value ) ) {\n\t\t\treturn wrapper;\n\t\t}\n\t\treturn value;\n\t}\n\tprop = trim( property );\n\n\t// Resolve target meta data:\n\tstrict = false; // TODO: support strict mode\n\n\t// Retrieve the first character in order to to detect how a slice operation was specified:\n\tch = prop[ 0 ];\n\n\t// Case: slice\n\tif ( ch === 'S' ) {\n\t\t// Convert the string to a slice object:\n\t\ts = str2slice( property );\n\t\tif ( s === null ) {\n\t\t\tthrow new Error( format( 'invalid operation. Unsupported slice operation. Value: `%s`.', property ) );\n\t\t}\n\t\t// Create a multi-slice:\n\t\ts = new MultiSlice( s );\n\t}\n\t// Case: multi-slice\n\telse if ( ch === 'M' ) {\n\t\t// Convert the string to a slice object:\n\t\ts = str2multislice( prop );\n\t\tif ( s === null ) {\n\t\t\tthrow new Error( format( 'invalid operation. Unsupported slice operation. Value: `%s`.', property ) );\n\t\t}\n\t}\n\t// Case: integer\n\telse if ( RE_INTEGER.test( prop ) ) {\n\t\t// Convert the string to a numeric value:\n\t\ts = parseInt( prop, 10 );\n\n\t\t// Create a multi-slice:\n\t\ts = new MultiSlice( s );\n\t}\n\t// Case: subsequence string\n\telse if ( prop.length > 0 ) {\n\t\tshape = target.shape;\n\t\ts = seq2multislice( prop, shape, true );\n\t\tif ( s.code ) {\n\t\t\tif ( s.code === 'ERR_SLICE_INVALID_INCREMENT' ) {\n\t\t\t\tthrow new Error( format( 'invalid operation. A subsequence increment must be a non-zero integer. Value: `%s`.', property ) );\n\t\t\t}\n\t\t\tif ( s.code === 'ERR_SLICE_INVALID_ELLIPSIS' ) {\n\t\t\t\tthrow new Error( format( 'invalid operation. A subsequence may only include a single ellipsis. Value: `%s`.', property ) );\n\t\t\t}\n\t\t\tif ( s.code === 'ERR_SLICE_INVALID_SUBSEQUENCE' ) {\n\t\t\t\tthrow new Error( format( 'invalid operation. Unsupported slice operation. Value: `%s`.', property ) );\n\t\t\t}\n\t\t\tif ( s.code === 'ERR_SLICE_TOO_MANY_DIMENSIONS' ) {\n\t\t\t\tthrow new RangeError( format( 'invalid operation. Number of slice dimensions does not match the number of array dimensions. Array shape: (%s). Slice dimensions: %u.', target.shape.join( ',' ), replace( prop, /\\.\\.\\.,/, '' ).split( ',' ).length ) );\n\t\t\t}\n\t\t\t// NOTE: the following error check must come last due to fall-through when in non-strict mode...\n\t\t\tif ( s.code === 'ERR_SLICE_OUT_OF_BOUNDS' ) {\n\t\t\t\tif ( strict ) {\n\t\t\t\t\tthrow new RangeError( format( 'invalid operation. Slice exceeds array bounds. Array shape: (%s).', shape.join( ',' ) ) );\n\t\t\t\t}\n\t\t\t\t// Repeat parsing, this time allowing for out-of-bounds slices:\n\t\t\t\ts = seq2multislice( prop, shape, false );\n\t\t\t}\n\t\t}\n\t}\n\t// Case: empty string\n\telse {\n\t\tthrow new RangeError( format( 'invalid operation. Number of slice dimensions does not match the number of array dimensions. Array shape: (%s). Slice dimensions: %u.', target.shape.join( ',' ), 0 ) );\n\t}\n\ttry {\n\t\treturn slice( receiver, s, strict );\n\t} catch ( err ) {\n\t\tE = errConstructor( err );\n\t\tthrow new E( errMessage( err.message ) );\n\t}\n\n\t/**\n\t* Method wrapper.\n\t*\n\t* @private\n\t* @returns {*} results\n\t*/\n\tfunction wrapper() {\n\t\tvar args;\n\t\tvar i;\n\n\t\targs = [];\n\t\tfor ( i = 0; i < arguments.length; i++ ) {\n\t\t\targs.push( arguments[ i ] );\n\t\t}\n\t\treturn value.apply( ( this === receiver ) ? target : this, args ); // eslint-disable-line no-invalid-this\n\t}\n}\n\n\n// EXPORTS //\n\nexport default get;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2023 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isFunction from '@stdlib/assert-is-function';\nimport trim from '@stdlib/string-base-trim';\nimport str2multislice from '@stdlib/slice-base-str2multislice';\nimport seq2multislice from '@stdlib/slice-base-seq2multislice';\nimport sargs2multislice from '@stdlib/slice-base-sargs2multislice';\nimport slice from '@stdlib/ndarray-base-slice';\nimport format from '@stdlib/error-tools-fmtprodmsg';\nimport errMessage from './error_message.js';\nimport errConstructor from './error_constructor.js';\nimport hasProperty from './has_property.js';\nimport RE_SUBSEQ from './re_subseq.js';\n\n\n// FUNCTIONS //\n\n/**\n* Trap for retrieving property values.\n*\n* @private\n* @param {Object} target - target object\n* @param {(string|symbol)} property - property name\n* @param {Object} receiver - the proxy object or an object inheriting from the proxy\n* @throws {Error} invalid slice operation\n* @throws {RangeError} number of slice dimensions must match the number of array dimensions\n* @throws {RangeError} slice exceeds array bounds\n* @throws {Error} slice increment must be a non-zero integer\n* @returns {*} result\n*/\nfunction get( target, property, receiver ) { // eslint-disable-line stdlib/jsdoc-require-throws-tags\n\tvar strict;\n\tvar shape;\n\tvar value;\n\tvar prop;\n\tvar ch;\n\tvar E;\n\tvar s;\n\n\tif ( hasProperty( property ) ) {\n\t\tvalue = target[ property ];\n\t\tif ( isFunction( value ) ) {\n\t\t\treturn wrapper;\n\t\t}\n\t\treturn value;\n\t}\n\tprop = trim( property );\n\n\t// Resolve target meta data:\n\tstrict = false; // TODO: support strict mode\n\n\t// Retrieve the first character in order to to detect how a slice operation was specified:\n\tch = prop[ 0 ];\n\n\t// Case: multi-slice (e.g., 'MultiSlice(Slice(0,10,2),null,2,Slice(10,5,-1))')\n\tif ( ch === 'M' ) {\n\t\ts = str2multislice( prop );\n\t\tif ( s === null ) {\n\t\t\tthrow new Error( format( 'invalid operation. Unsupported slice operation. Value: `%s`.', property ) );\n\t\t}\n\t}\n\t// Case: subsequence string (e.g., '...' or ':10,1,::-1,:,-5,2::3')\n\telse if ( RE_SUBSEQ.test( prop ) || prop === '...' ) {\n\t\tshape = target.shape;\n\t\ts = seq2multislice( prop, shape, true );\n\t\tif ( s.code ) {\n\t\t\tif ( s.code === 'ERR_SLICE_INVALID_INCREMENT' ) {\n\t\t\t\tthrow new Error( format( 'invalid operation. A subsequence increment must be a non-zero integer. Value: `%s`.', property ) );\n\t\t\t}\n\t\t\tif ( s.code === 'ERR_SLICE_INVALID_ELLIPSIS' ) {\n\t\t\t\tthrow new Error( format( 'invalid operation. A subsequence may only include a single ellipsis. Value: `%s`.', property ) );\n\t\t\t}\n\t\t\tif ( s.code === 'ERR_SLICE_INVALID_SUBSEQUENCE' ) {\n\t\t\t\tthrow new Error( format( 'invalid operation. Unsupported slice operation. Value: `%s`.', property ) );\n\t\t\t}\n\t\t\t// NOTE: the following error check must come last due to fall-through when in non-strict mode...\n\t\t\tif ( s.code === 'ERR_SLICE_OUT_OF_BOUNDS' ) {\n\t\t\t\tif ( strict ) {\n\t\t\t\t\tthrow new RangeError( format( 'invalid operation. Slice exceeds array bounds. Array shape: (%s).', shape.join( ',' ) ) );\n\t\t\t\t}\n\t\t\t\t// Repeat parsing, this time allowing for out-of-bounds slices:\n\t\t\t\ts = seq2multislice( prop, shape, false );\n\t\t\t}\n\t\t}\n\t}\n\t// Case: array syntax (e.g., [ Slice(0,10,1), null, Slice(4,null,-1) ]) or Slice or integer or arbitrary string (where the latter three are not valid for >2d arrays)\n\telse {\n\t\ts = sargs2multislice( prop );\n\t\tif ( s === null ) {\n\t\t\tthrow new Error( format( 'invalid operation. Unsupported slice operation. Value: `%s`.', property ) );\n\t\t}\n\t}\n\ttry {\n\t\treturn slice( receiver, s, strict );\n\t} catch ( err ) {\n\t\tE = errConstructor( err );\n\t\tthrow new E( errMessage( err.message ) );\n\t}\n\n\t/**\n\t* Method wrapper.\n\t*\n\t* @private\n\t* @returns {*} results\n\t*/\n\tfunction wrapper() {\n\t\tvar args;\n\t\tvar i;\n\n\t\targs = [];\n\t\tfor ( i = 0; i < arguments.length; i++ ) {\n\t\t\targs.push( arguments[ i ] );\n\t\t}\n\t\treturn value.apply( ( this === receiver ) ? target : this, args ); // eslint-disable-line no-invalid-this\n\t}\n}\n\n\n// EXPORTS //\n\nexport default get;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2023 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* eslint-disable max-len */\n\n'use strict';\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils-define-nonenumerable-read-only-property';\nimport parent from '@stdlib/ndarray-ctor'; // eslint-disable-line stdlib/no-redeclare\nimport inherit from '@stdlib/utils-inherit';\nimport Proxy from '@stdlib/proxy-ctor';\nimport get0d from './get.0d.js';\nimport get1d from './get.1d.js';\nimport getnd from './get.nd.js';\n\n\n// MAIN //\n\n/**\n* Fancy ndarray constructor.\n*\n* @constructor\n* @param {string} dtype - data type\n* @param {Collection} buffer - data buffer\n* @param {NonNegativeIntegerArray} shape - array shape\n* @param {IntegerArray} strides - array strides\n* @param {NonNegativeInteger} offset - index offset\n* @param {string} order - specifies whether an array is row-major (C-style) or column-major (Fortran-style)\n* @param {Options} [options] - function options\n* @param {string} [options.mode=\"throw\"] - specifies how to handle indices which exceed array dimensions\n* @param {StringArray} [options.submode=[\"throw\"]] - specifies how to handle subscripts which exceed array dimensions on a per dimension basis\n* @param {boolean} [options.readonly=false] - boolean indicating whether an array should be read-only\n* @throws {TypeError} `dtype` argument must be a supported ndarray data type\n* @throws {TypeError} `buffer` argument must be an array-like object, typed-array-like, or a Buffer\n* @throws {TypeError} `buffer` argument `get` and `set` properties must be functions\n* @throws {TypeError} `shape` argument must be an array-like object containing nonnegative integers\n* @throws {Error} `shape` argument length must equal the number of dimensions\n* @throws {TypeError} `strides` argument must be an array-like object containing integers\n* @throws {Error} `strides` argument length must equal the number of dimensions (except for zero-dimensional arrays; in which case, the `strides` argument length must be equal to `1`)\n* @throws {Error} for zero-dimensional ndarrays, the `strides` argument must contain a single element equal to `0`\n* @throws {TypeError} `offset` argument must be a nonnegative integer\n* @throws {TypeError} `order` argument must be a supported ndarray order\n* @throws {Error} `buffer` argument must be compatible with specified meta data\n* @throws {TypeError} options argument must be an object\n* @throws {TypeError} must provide valid options\n* @throws {RangeError} too many dimensions\n* @returns {FancyArray} FancyArray instance\n*\n* @example\n* var buffer = [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0 ];\n* var shape = [ 3, 2 ];\n* var strides = [ 2, 1 ];\n* var offset = 0;\n*\n* var out = new FancyArray( 'generic', buffer, shape, strides, offset, 'row-major' );\n* // returns <FancyArray>\n*/\nfunction FancyArray( dtype, buffer, shape, strides, offset, order, options ) {\n\tvar handlers;\n\tvar nargs;\n\tvar ndims;\n\n\tnargs = arguments.length;\n\tif ( !( this instanceof FancyArray ) ) {\n\t\tif ( nargs < 7 ) {\n\t\t\treturn new FancyArray( dtype, buffer, shape, strides, offset, order );\n\t\t}\n\t\treturn new FancyArray( dtype, buffer, shape, strides, offset, order, options );\n\t}\n\t// Call the parent constructor:\n\tparent.call( this, dtype, buffer, shape, strides, offset, order, ( nargs < 7 ) ? {} : options );\n\n\tif ( Proxy ) { // NOTE: cannot use `@stdlib/assert/has-proxy-support` here, as that API uses code evaluation and might violate CSPs\n\t\tndims = shape.length;\n\t\thandlers = {};\n\t\tif ( ndims === 0 ) {\n\t\t\thandlers.get = get0d;\n\t\t} else if ( ndims === 1 ) {\n\t\t\thandlers.get = get1d;\n\t\t} else {\n\t\t\thandlers.get = getnd;\n\t\t}\n\t\treturn new Proxy( this, handlers );\n\t}\n\t// TODO: replace with `@stdlib/console/warn` (or equivalent once available)\n\tconsole.warn( 'WARNING: Proxy objects are not supported in the current environment. Some `FancyArray` functionality may not be available.' ); // eslint-disable-line no-console\n\treturn this;\n}\n\n// Inherit from the parent constructor:\ninherit( FancyArray, parent );\n\n/**\n* Constructor name.\n*\n* @name name\n* @memberof FancyArray\n* @type {string}\n* @default 'ndarray'\n*\n* @example\n* var str = FancyArray.name;\n* // returns 'ndarray'\n*/\nsetReadOnly( FancyArray, 'name', 'ndarray' );\n\n\n// EXPORTS //\n\nexport default FancyArray;\n"],"names":["errMessage","msg","replace","errConstructor","err","isRangeError","RangeError","isTypeError","TypeError","isSyntaxError","SyntaxError","Error","hasProperty","contains","propertiesIn","ndarray","defaults","get","RE_INTEGER","RE_SUBSEQ","target","property","receiver","value","shape","prop","ch","s","isFunction","args","i","arguments","length","push","apply","this","trim","str2slice","format","MultiSlice","str2multislice","test","parseInt","seq2multislice","code","join","split","slice","message","sargs2multislice","FancyArray","dtype","buffer","strides","offset","order","options","handlers","nargs","ndims","parent","call","Proxy","get0d","get1d","getnd","console","warn","inherit","setReadOnly"],"mappings":"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"}