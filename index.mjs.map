{"version":3,"file":"index.mjs","sources":["../lib/has_property.js","../lib/re_integer.js","../lib/get.0d.js","../lib/array_options.js","../lib/empty.js","../lib/view.1d.js","../lib/get.1d.js","../lib/re_subseq.js","../lib/view.nd.js","../lib/slice_start.js","../lib/slice_strides.js","../lib/get.nd.js","../lib/main.js"],"sourcesContent":["/**\n* @license Apache-2.0\n*\n* Copyright (c) 2023 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport propertiesIn from '@stdlib/utils-properties-in';\nimport { factory as contains } from '@stdlib/array-base-assert-contains';\nimport ndarray from '@stdlib/ndarray-ctor';\nimport defaults from '@stdlib/ndarray-defaults';\n\n\n// MAIN //\n\n/**\n* Tests whether a property name exists on the parent prototype.\n*\n* @private\n* @name hasProperty\n* @type {Function}\n* @param {(string|symbol)} name - property name\n* @returns {boolean} boolean indicating whether the property exists on the parent prototype\n*\n* @example\n* var bool = hasProperty( 'get' );\n* // returns true\n*\n* bool = hasProperty( 'foo' );\n* // returns false\n*/\nvar hasProperty = contains( propertiesIn( new ndarray( 'generic', [ 0 ], [], [ 0 ], 0, defaults.get( 'order' ) ) ) );\n\n\n// EXPORTS //\n\nexport default hasProperty;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2023 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MAIN //\n\n/**\n* Regular expression for testing whether a string is an integer string.\n*\n* @private\n* @name RE_INTEGER\n* @type {RegExp}\n*\n* @example\n* var bool = RE_INTEGER.test( '10' );\n* // returns true\n*\n* @example\n* var bool = RE_INTEGER.test( '-1' );\n* // returns true\n*\n* @example\n* var bool = RE_INTEGER.test( '0:10:2' );\n* // returns false\n*/\nvar RE_INTEGER = /^-?[0-9]+$/;\n\n\n// EXPORTS //\n\nexport default RE_INTEGER;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2023 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isFunction from '@stdlib/assert-is-function';\nimport trim from '@stdlib/string-base-trim';\nimport str2multislice from '@stdlib/slice-base-str2multislice';\nimport format from '@stdlib/error-tools-fmtprodmsg';\nimport hasProperty from './has_property.js';\nimport options from './array_options.js';\nimport RE_INTEGER from './re_integer.js';\n\n\n// MAIN //\n\n/**\n* Trap for retrieving property values.\n*\n* @private\n* @param {Object} target - target object\n* @param {(string|symbol)} property - property name\n* @param {Object} receiver - the proxy object or an object inheriting from the proxy\n* @throws {Error} invalid slice operation\n* @throws {RangeError} number of slice dimensions must match the number of array dimensions\n* @returns {*} result\n*/\nfunction get( target, property, receiver ) {\n\tvar dtype;\n\tvar value;\n\tvar prop;\n\tvar ch;\n\tvar sh;\n\tvar s;\n\tif ( hasProperty( property ) ) {\n\t\tvalue = target[ property ];\n\t\tif ( isFunction( value ) ) {\n\t\t\treturn wrapper;\n\t\t}\n\t\treturn value;\n\t}\n\tprop = trim( property );\n\n\t// Resolve target meta data:\n\tdtype = target.dtype;\n\tsh = target.shape;\n\n\t// Retrieve the first character in order to to detect how a slice operation was specified:\n\tch = prop[ 0 ];\n\n\t// Case: multi-slice\n\tif ( ch === 'M' ) {\n\t\t// Convert the string to a slice object:\n\t\ts = str2multislice( prop );\n\t\tif ( s === null ) {\n\t\t\tthrow new Error( format( 'invalid operation. Unsupported slice operation. Value: `%s`.', property ) );\n\t\t}\n\t\t// TODO: => @stdlib/ndarray/base/slice: return slice( receiver, s.data );\n\n\t\t// Ensure that we were provided an empty multi-slice:\n\t\tif ( s.ndims !== sh.length ) {\n\t\t\tthrow new RangeError( format( 'invalid operation. Number of array dimensions does not match the number of slice dimensions. Array shape: (%s). Slice dimensions: %u.', sh.join( ',' ), s.ndims ) );\n\t\t}\n\t}\n\t// Case: non-empty string\n\telse if ( prop.length !== 0 ) {\n\t\t// TODO: the following can be generalized by going ahead and parsing the slice string or integer and passing to a functional API which then verifies that s.ndims !== sh.length. We need only retain the error raised for an invalid operation.\n\n\t\t// Case: slice or an integer\n\t\tif ( ch === 'S' || RE_INTEGER.test( prop ) ) {\n\t\t\tthrow new RangeError( format( 'invalid operation. Number of array dimensions does not match the number of slice dimensions. Array shape: (%s). Slice dimensions: %u.', sh.join( ',' ), 1 ) );\n\t\t}\n\t\tthrow new Error( format( 'invalid operation. Unsupported slice operation. Value: `%s`.', property ) );\n\t}\n\t// TODO: => @stdlib/ndarray/base/slice: return slice( receiver, [] );\n\n\t// Return an zero-dimensional array view:\n\treturn new receiver.constructor( dtype, target.data, sh, target.strides, target.offset, target.order, options() ); // eslint-disable-line max-len\n\n\t/**\n\t* Method wrapper.\n\t*\n\t* @private\n\t* @returns {*} results\n\t*/\n\tfunction wrapper() {\n\t\tvar args;\n\t\tvar i;\n\n\t\targs = [];\n\t\tfor ( i = 0; i < arguments.length; i++ ) {\n\t\t\targs.push( arguments[ i ] );\n\t\t}\n\t\treturn value.apply( ( this === receiver ) ? target : this, args ); // eslint-disable-line no-invalid-this\n\t}\n}\n\n\n// EXPORTS //\n\nexport default get;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2023 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MAIN //\n\n/**\n* Returns array creation options.\n*\n* @private\n* @returns {Object} options\n*/\nfunction options() {\n\treturn {\n\t\t// Default to always returning read-only arrays:\n\t\t'readonly': true\n\t};\n}\n\n\n// EXPORTS //\n\nexport default options;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2023 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport buffer from '@stdlib/ndarray-base-buffer';\nimport zeros from '@stdlib/array-base-zeros';\nimport options from './array_options.js';\n\n\n// MAIN //\n\n/**\n* Returns an empty n-dimensional ndarray.\n*\n* @private\n* @param {Function} ctor - ndarray constructor\n* @param {string} dtype - array data type\n* @param {NonNegativeIntegerArray} shape - array shape\n* @param {string} order - layout order\n* @returns {ndarray} empty ndarray\n*/\nfunction empty( ctor, dtype, shape, order ) {\n\tvar strides;\n\tvar ndims;\n\n\tndims = shape.length;\n\tif ( ndims === 0 ) {\n\t\tstrides = [ 0 ];\n\t} else {\n\t\tstrides = zeros( ndims );\n\t}\n\treturn new ctor( dtype, buffer( dtype, 0 ), shape, strides, 0, order, options() ); // eslint-disable-line max-len\n}\n\n\n// EXPORTS //\n\nexport default empty;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2023 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport vind2bind from '@stdlib/ndarray-base-vind2bind';\nimport sliceLength from '@stdlib/slice-base-length';\nimport empty from './empty.js';\nimport options from './array_options.js';\n\n\n// MAIN //\n\n/**\n* Returns a view of a one-dimensional array.\n*\n* @private\n* @param {Function} ctor - array constructor\n* @param {string} dtype - array data type\n* @param {Collection} data - underlying data buffer\n* @param {NonNegativeIntegerArray} shape - array shape\n* @param {IntegerArray} strides - array strides\n* @param {NonNegativeInteger} offset - index offset\n* @param {string} order - layout order\n* @param {Slice} slice - slice object\n* @returns {ndarray} ndarray view\n*/\nfunction sliceView( ctor, dtype, data, shape, strides, offset, order, slice ) {\n\tvar start = slice.start;\n\n\t// If the slice does not contain any elements, return an empty one-dimensional array...\n\tif ( start === slice.stop ) { // TODO: replace with assertion utility?\n\t\treturn empty( ctor, dtype, [ 0 ], order );\n\t}\n\t// Compute a new offset (i.e., the position of the starting index in the underlying buffer):\n\toffset = vind2bind( shape, strides, offset, order, start, 'throw' );\n\n\t// Determine the number of elements in the slice:\n\tshape = [ sliceLength( slice ) ];\n\n\t// Compute new array strides:\n\tstrides = [ strides[0]*slice.step ];\n\n\t// Return a one-dimensional view:\n\treturn new ctor( dtype, data, shape, strides, offset, order, options() );\n}\n\n\n// EXPORTS //\n\nexport default sliceView;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2023 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* eslint-disable max-len */\n\n'use strict';\n\n// MODULES //\n\nimport isFunction from '@stdlib/assert-is-function';\nimport trim from '@stdlib/string-base-trim';\nimport seq2slice from '@stdlib/slice-base-seq2slice';\nimport str2slice from '@stdlib/slice-base-str2slice';\nimport str2multislice from '@stdlib/slice-base-str2multislice';\nimport normalizeSlice from '@stdlib/slice-base-normalize-slice';\nimport normalizeMultiSlice from '@stdlib/slice-base-normalize-multi-slice';\nimport vind2bind from '@stdlib/ndarray-base-vind2bind';\nimport format from '@stdlib/error-tools-fmtprodmsg';\nimport hasProperty from './has_property.js';\nimport options from './array_options.js';\nimport RE_INTEGER from './re_integer.js';\nimport sliceView from './view.1d.js';\nimport empty from './empty.js';\n\n\n// MAIN //\n\n/**\n* Trap for retrieving property values.\n*\n* @private\n* @param {Object} target - target object\n* @param {(string|symbol)} property - property name\n* @param {Object} receiver - the proxy object or an object inheriting from the proxy\n* @throws {Error} invalid slice operation\n* @throws {RangeError} number of slice dimensions must match the number of array dimensions\n* @throws {RangeError} slice exceeds array bounds\n* @throws {Error} slice increment must be a non-zero integer\n* @returns {*} result\n*/\nfunction get( target, property, receiver ) {\n\tvar strides;\n\tvar offset;\n\tvar strict;\n\tvar dtype;\n\tvar shape;\n\tvar order;\n\tvar value;\n\tvar parts;\n\tvar prop;\n\tvar ch;\n\tvar s;\n\tif ( hasProperty( property ) ) {\n\t\tvalue = target[ property ];\n\t\tif ( isFunction( value ) ) {\n\t\t\treturn wrapper;\n\t\t}\n\t\treturn value;\n\t}\n\tprop = trim( property );\n\n\t// Resolve target meta data:\n\tdtype = target.dtype;\n\tshape = target.shape;\n\tstrides = target.strides;\n\toffset = target.offset;\n\torder = target.order;\n\tstrict = false; // TODO: support strict mode\n\n\t// Retrieve the first character in order to to detect how a slice operation was specified:\n\tch = prop[ 0 ];\n\n\t// Case: slice\n\tif ( ch === 'S' ) {\n\t\t// Convert the string to a slice object:\n\t\ts = str2slice( property );\n\t\tif ( s === null ) {\n\t\t\tthrow new Error( format( 'invalid operation. Unsupported slice operation. Value: `%s`.', property ) );\n\t\t}\n\t\t// TODO: => @stdlib/ndarray/base/slice: return slice( receiver, [ s ] );\n\n\t\t// Normalize the slice object based on the array length:\n\t\ts = normalizeSlice( s, shape[ 0 ], true );\n\n\t\t// If the slice exceeds array bounds, return an empty one-dimensional array...\n\t\tif ( s.code ) {\n\t\t\tif ( strict ) {\n\t\t\t\tthrow new RangeError( format( 'invalid operation. Slice exceeds array bounds. Array shape: (%s).', shape.join( ',' ) ) );\n\t\t\t}\n\t\t\treturn empty( receiver.constructor, dtype, [ 0 ], order );\n\t\t}\n\t\t// Return a view of the provided array:\n\t\treturn sliceView( receiver.constructor, dtype, target.data, shape, strides, offset, order, s );\n\t}\n\t// Case: multi-slice\n\tif ( ch === 'M' ) {\n\t\t// Convert the string to a slice object:\n\t\ts = str2multislice( prop );\n\t\tif ( s === null ) {\n\t\t\tthrow new Error( format( 'invalid operation. Unsupported slice operation. Value: `%s`.', property ) );\n\t\t}\n\t\t// TODO: => @stdlib/ndarray/base/slice: return slice( receiver, s.data );\n\n\t\t// Ensure that we were provided a one-dimensional multi-slice:\n\t\tif ( s.ndims !== shape.length ) {\n\t\t\tthrow new RangeError( format( 'invalid operation. Number of array dimensions does not match the number of slice dimensions. Array shape: (%s). Slice dimensions: %u.', shape.join( ',' ), s.ndims ) );\n\t\t}\n\t\t// Normalize the slice object based on the array shape:\n\t\ts = normalizeMultiSlice( s, shape, true );\n\n\t\t// If the slice exceeds array bounds, return an empty one-dimensional array...\n\t\tif ( s.code ) {\n\t\t\tif ( strict ) {\n\t\t\t\tthrow new RangeError( format( 'invalid operation. Slice exceeds array bounds. Array shape: (%s).', shape.join( ',' ) ) );\n\t\t\t}\n\t\t\treturn empty( receiver.constructor, dtype, [ 0 ], order );\n\t\t}\n\t\t// Return a view of the provided array:\n\t\treturn sliceView( receiver.constructor, dtype, target.data, shape, strides, offset, order, s.data[ 0 ] );\n\t}\n\t// Case: integer\n\tif ( RE_INTEGER.test( prop ) ) {\n\t\t// Convert the string to a numeric value:\n\t\ts = parseInt( prop, 10 );\n\n\t\t// TODO: => @stdlib/ndarray/base/slice: return slice( receiver, [ s ] );\n\n\t\t// Check whether we need to resolve an index relative to the last array element...\n\t\tif ( s < 0 ) {\n\t\t\ts = shape[ 0 ] + s;\n\n\t\t\t// If the index exceeds array bounds, return an empty zero-dimensional array...\n\t\t\tif ( s < 0 ) {\n\t\t\t\tif ( strict ) {\n\t\t\t\t\tthrow new RangeError( format( 'invalid operation. Slice exceeds array bounds. Array shape: (%s).', shape.join( ',' ) ) );\n\t\t\t\t}\n\t\t\t\treturn empty( receiver.constructor, dtype, [], order );\n\t\t\t}\n\t\t}\n\t\t// If the index exceeds array bounds, return an empty zero-dimensional array...\n\t\telse if ( s >= shape[ 0 ] ) {\n\t\t\tif ( strict ) {\n\t\t\t\tthrow new RangeError( format( 'invalid operation. Slice exceeds array bounds. Array shape: (%s).', shape.join( ',' ) ) );\n\t\t\t}\n\t\t\treturn empty( receiver.constructor, dtype, [], order );\n\t\t}\n\t\t// Compute the index offset for the indexed element:\n\t\toffset = vind2bind( shape, strides, offset, order, s, 'throw' );\n\n\t\t// Return a zero-dimensional array:\n\t\treturn new receiver.constructor( dtype, target.data, [], [ 0 ], offset, order, options() );\n\t}\n\t// Check whether we were provided a multi-dimensional subsequence string...\n\tparts = prop.split( /\\s*,\\s*/ );\n\tif ( parts.length > 1 ) {\n\t\tthrow new RangeError( format( 'invalid operation. Number of array dimensions does not match the number of slice dimensions. Array shape: (%s). Slice dimensions: %u.', shape.join( ',' ), parts.length ) );\n\t}\n\tprop = parts[ 0 ];\n\tif ( prop.length === 0 ) {\n\t\tthrow new RangeError( format( 'invalid operation. Number of array dimensions does not match the number of slice dimensions. Array shape: (%s). Slice dimensions: %u.', shape.join( ',' ), 0 ) );\n\t}\n\t// Attempt to convert the subsequence string to a slice object:\n\ts = seq2slice( prop, shape[ 0 ], true );\n\tif ( s.code ) {\n\t\tif ( s.code === 'ERR_SLICE_OUT_OF_BOUNDS' ) {\n\t\t\tif ( strict ) {\n\t\t\t\tthrow new RangeError( format( 'invalid operation. Slice exceeds array bounds. Array shape: (%s).', shape.join( ',' ) ) );\n\t\t\t}\n\t\t\t// Return an empty zero-dimensional array:\n\t\t\treturn empty( receiver.constructor, dtype, [], order );\n\t\t}\n\t\tif ( s.code === 'ERR_SLICE_INVALID_INCREMENT' ) {\n\t\t\tthrow new Error( format( 'invalid operation. A subsequence increment must be a non-zero integer. Value: `%s`.', property ) );\n\t\t}\n\t\tif ( s.code === 'ERR_SLICE_INVALID_SUBSEQUENCE' ) {\n\t\t\tthrow new Error( format( 'invalid operation. Unsupported slice operation. Value: `%s`.', property ) );\n\t\t}\n\t}\n\t// TODO: => @stdlib/ndarray/base/slice: return slice( receiver, [ s ] );\n\n\t// Return a view of the provided array:\n\treturn sliceView( receiver.constructor, dtype, target.data, shape, strides, offset, order, s );\n\n\t/**\n\t* Method wrapper.\n\t*\n\t* @private\n\t* @returns {*} results\n\t*/\n\tfunction wrapper() {\n\t\tvar args;\n\t\tvar i;\n\n\t\targs = [];\n\t\tfor ( i = 0; i < arguments.length; i++ ) {\n\t\t\targs.push( arguments[ i ] );\n\t\t}\n\t\treturn value.apply( ( this === receiver ) ? target : this, args ); // eslint-disable-line no-invalid-this\n\t}\n}\n\n\n// EXPORTS //\n\nexport default get;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2023 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MAIN //\n\n/**\n* Regular expression for testing whether a string is a subsequence string.\n*\n* @private\n* @name RE_SUBSEQ\n* @type {RegExp}\n*\n* @example\n* var bool = RE_SUBSEQ.test( '0:10:2' );\n* // returns true\n*\n* @example\n* var bool = RE_SUBSEQ.test( '0' );\n* // returns false\n*\n* @example\n* var bool = RE_SUBSEQ.test( 'Slice(0,10,2)' );\n* // returns false\n*/\nvar RE_SUBSEQ = /:/;\n\n\n// EXPORTS //\n\nexport default RE_SUBSEQ;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2023 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport normalizeMultiSlice from '@stdlib/slice-base-normalize-multi-slice';\nimport nonreducedDimensions from '@stdlib/slice-base-nonreduced-dimensions';\nimport sliceShape from '@stdlib/slice-base-shape';\nimport take from '@stdlib/array-base-take';\nimport vind2bind from '@stdlib/ndarray-base-vind2bind';\nimport numel from '@stdlib/ndarray-base-numel';\nimport format from '@stdlib/error-tools-fmtprodmsg';\nimport sliceStart from './slice_start.js';\nimport sliceStrides from './slice_strides.js';\nimport options from './array_options.js';\nimport empty from './empty.js';\n\n\n// MAIN //\n\n/**\n* Returns a view of an n-dimensional array.\n*\n* @private\n* @param {Object} target - target object\n* @param {string} property - original property string\n* @param {Object} receiver - the proxy object or an object inheriting from the proxy\n* @param {(MultiSlice|null)} slice - multi-slice object\n* @throws {Error} invalid slice operation\n* @throws {RangeError} number of slice dimensions must match the number of array dimensions\n* @throws {RangeError} slice exceeds array bounds\n* @returns {ndarray} ndarray view\n*/\nfunction sliceView( target, property, receiver, slice ) {\n\tvar strides;\n\tvar offset;\n\tvar strict;\n\tvar dtype;\n\tvar shape;\n\tvar order;\n\tvar sdims;\n\tvar ctor;\n\tvar sh;\n\tvar ns;\n\n\t// Verify that we were successfully able to create a multi-slice:\n\tif ( slice === null ) {\n\t\tthrow new Error( format( 'invalid operation. Unsupported slice operation. Value: `%s`.', property ) );\n\t}\n\t// Retrieve target meta data:\n\tdtype = target.dtype;\n\tshape = target.shape;\n\tstrides = target.strides;\n\toffset = target.offset;\n\torder = target.order;\n\tstrict = false; // TODO: support strict mode\n\n\t// Ensure that the number of array dimensions matches the number of slices:\n\tif ( slice.ndims !== shape.length ) {\n\t\tthrow new RangeError( format( 'invalid operation. Number of array dimensions does not match the number of slice dimensions. Array shape: (%s). Slice dimensions: %u.', shape.join( ',' ), slice.ndims ) );\n\t}\n\t// Normalize the slice object based on the array shape:\n\tns = normalizeMultiSlice( slice, shape, true );\n\n\t// In strict mode, if the slice exceeds array bounds, raise an exception...\n\tif ( ns.code && strict ) {\n\t\tthrow new RangeError( format( 'invalid operation. Slice exceeds array bounds. Array shape: (%s).', shape.join( ',' ) ) );\n\t}\n\t// Resolve the output array constructor:\n\tctor = receiver.constructor;\n\n\t// Compute the slice shape:\n\tsh = sliceShape( ns );\n\n\t// Resolve the indices of the non-reduced dimensions:\n\tsdims = nonreducedDimensions( slice );\n\n\t// If the slice does not contain any elements, return an empty array...\n\tif ( numel( sh ) === 0 ) {\n\t\treturn empty( ctor, dtype, take( sh, sdims ), order );\n\t}\n\t// Resolve the index offset of the first element:\n\toffset = vind2bind( shape, strides, offset, order, sliceStart( ns, shape, strides, 0 ), 'throw' ); // TODO: @stdlib/ndarray/base/sind2bind\n\n\t// Remove reduced dimensions from the slice shape:\n\tsh = take( sh, sdims );\n\n\t// If all dimensions were reduced, return a zero-dimensional array...\n\tif ( sh.length === 0 ) {\n\t\treturn new ctor( dtype, target.data, [], [ 0 ], offset, order, options() ); // eslint-disable-line max-len\n\t}\n\t// Update strides according to slice steps:\n\tstrides = sliceStrides( ns, strides, sdims );\n\n\t// Return a slice view:\n\treturn new ctor( dtype, target.data, sh, strides, offset, order, options() ); // eslint-disable-line max-len\n}\n\n\n// EXPORTS //\n\nexport default sliceView;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2023 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport sub2ind from '@stdlib/ndarray-base-sub2ind';\n\n\n// MAIN //\n\n/**\n* Resolves the linear index of the first element indexed by a normalized multi-slice.\n*\n* ## Notes\n*\n* -   If `strides` contains negative strides, if an `offset` is greater than `0`, the function returns a linear index with respect to the underlying data buffer. If an `offset` is equal to `0`, the function returns a linear index with respect to the array view. For more information, see `@stdlib/ndarray/base/sub2ind`.\n*\n* @private\n* @param {MultiSlice} slice - normalized multi-slice object\n* @param {NonNegativeIntegerArray} shape - array shape\n* @param {IntegerArray} strides - array strides\n* @param {NonNegativeInteger} offset - index offset\n* @returns {NonNegativeInteger} linear index of the first element\n*/\nfunction sliceStart( slice, shape, strides, offset ) {\n\tvar data;\n\tvar args;\n\tvar i;\n\n\tdata = slice.data;\n\targs = [ shape, strides, offset ];\n\tfor ( i = 0; i < data.length; i++ ) {\n\t\targs.push( data[ i ].start );\n\t}\n\targs.push( 'throw' );\n\treturn sub2ind.apply( null, args );\n}\n\n\n// EXPORTS //\n\nexport default sliceStart;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2023 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MAIN //\n\n/**\n* Resolves slice strides for a provided normalized multi-slice object.\n*\n* @private\n* @param {MultiSlice} slice - normalized multi-slice object\n* @param {IntegerArray} strides - array strides\n* @param {NonNegativeIntegerArray} sdims - indices of non-reduced dimensions\n* @returns {IntegerArray} slice strides\n*/\nfunction sliceStrides( slice, strides, sdims ) {\n\tvar data;\n\tvar out;\n\tvar i;\n\tvar j;\n\n\tdata = slice.data;\n\tout = [];\n\tfor ( i = 0; i < sdims.length; i++ ) {\n\t\tj = sdims[ i ];\n\t\tout.push( strides[j]*data[j].step );\n\t}\n\treturn out;\n}\n\n\n// EXPORTS //\n\nexport default sliceStrides;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2023 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isFunction from '@stdlib/assert-is-function';\nimport trim from '@stdlib/string-base-trim';\nimport str2multislice from '@stdlib/slice-base-str2multislice';\nimport seq2multislice from '@stdlib/slice-base-seq2multislice';\nimport sargs2multislice from '@stdlib/slice-base-sargs2multislice';\nimport format from '@stdlib/error-tools-fmtprodmsg';\nimport hasProperty from './has_property.js';\nimport RE_SUBSEQ from './re_subseq.js';\nimport sliceView from './view.nd.js';\nimport empty from './empty.js';\n\n\n// FUNCTIONS //\n\n/**\n* Trap for retrieving property values.\n*\n* @private\n* @param {Object} target - target object\n* @param {(string|symbol)} property - property name\n* @param {Object} receiver - the proxy object or an object inheriting from the proxy\n* @throws {Error} invalid slice operation\n* @throws {RangeError} number of slice dimensions must match the number of array dimensions\n* @throws {RangeError} slice exceeds array bounds\n* @throws {Error} slice increment must be a non-zero integer\n* @returns {*} result\n*/\nfunction get( target, property, receiver ) {\n\tvar strict;\n\tvar shape;\n\tvar value;\n\tvar prop;\n\tvar ch;\n\tvar s;\n\n\tif ( hasProperty( property ) ) {\n\t\tvalue = target[ property ];\n\t\tif ( isFunction( value ) ) {\n\t\t\treturn wrapper;\n\t\t}\n\t\treturn value;\n\t}\n\tprop = trim( property );\n\n\t// Resolve target meta data:\n\tstrict = false; // TODO: support strict mode\n\n\t// Retrieve the first character in order to to detect how a slice operation was specified:\n\tch = prop[ 0 ];\n\n\t// Case: multi-slice (e.g., 'MultiSlice(Slice(0,10,2),null,2,Slice(10,5,-1))')\n\tif ( ch === 'M' ) {\n\t\t// TODO: => @stdlib/ndarray/base/slice: return slice( receiver, str2multislice( prop ).data ); // TODO: handle `null`\n\n\t\treturn sliceView( target, property, receiver, str2multislice( prop ) );\n\t}\n\t// Case: subsequence string (e.g., ':10,1,::-1,:,-5,2::3')\n\tif ( RE_SUBSEQ.test( prop ) ) {\n\t\tshape = target.shape;\n\t\ts = seq2multislice( prop, shape, true );\n\t\tif ( s.code ) {\n\t\t\tif ( s.code === 'ERR_SLICE_OUT_OF_BOUNDS' ) {\n\t\t\t\tif ( strict ) {\n\t\t\t\t\tthrow new RangeError( format( 'invalid operation. Slice exceeds array bounds. Array shape: (%s).', shape.join( ',' ) ) );\n\t\t\t\t}\n\t\t\t\t// Return an empty zero-dimensional array:\n\t\t\t\treturn empty( receiver.constructor, target.dtype, [], target.order );\n\t\t\t}\n\t\t\tif ( s.code === 'ERR_SLICE_INVALID_INCREMENT' ) {\n\t\t\t\tthrow new Error( format( 'invalid operation. A subsequence increment must be a non-zero integer. Value: `%s`.', property ) );\n\t\t\t}\n\t\t\tif ( s.code === 'ERR_SLICE_INVALID_ELLIPSIS' ) {\n\t\t\t\tthrow new Error( format( 'invalid operation. A subsequence may only include a single ellipsis. Value: `%s`.', property ) );\n\t\t\t}\n\t\t\tif ( s.code === 'ERR_SLICE_INVALID_SUBSEQUENCE' ) {\n\t\t\t\tthrow new Error( format( 'invalid operation. Unsupported slice operation. Value: `%s`.', property ) );\n\t\t\t}\n\t\t}\n\t\t// TODO: => @stdlib/ndarray/base/slice: return slice( receiver, s.data );\n\n\t\treturn sliceView( target, property, receiver, s );\n\t}\n\t// Case: array syntax (e.g., [ Slice(0,10,1), null, Slice(4,null,-1) ])\n\n\t// TODO: => @stdlib/ndarray/base/slice: return slice( receiver, sargs2multislice( prop ).data ); // TODO: handle `null`\n\n\treturn sliceView( target, '['+property+']', receiver, sargs2multislice( prop ) );\n\n\t/**\n\t* Method wrapper.\n\t*\n\t* @private\n\t* @returns {*} results\n\t*/\n\tfunction wrapper() {\n\t\tvar args;\n\t\tvar i;\n\n\t\targs = [];\n\t\tfor ( i = 0; i < arguments.length; i++ ) {\n\t\t\targs.push( arguments[ i ] );\n\t\t}\n\t\treturn value.apply( ( this === receiver ) ? target : this, args ); // eslint-disable-line no-invalid-this\n\t}\n}\n\n\n// EXPORTS //\n\nexport default get;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2023 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* eslint-disable max-len */\n\n'use strict';\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils-define-nonenumerable-read-only-property';\nimport parent from '@stdlib/ndarray-ctor'; // eslint-disable-line stdlib/no-redeclare\nimport inherit from '@stdlib/utils-inherit';\nimport Proxy from '@stdlib/proxy-ctor';\nimport get0d from './get.0d.js';\nimport get1d from './get.1d.js';\nimport getnd from './get.nd.js';\n\n\n// MAIN //\n\n/**\n* Fancy ndarray constructor.\n*\n* @constructor\n* @param {string} dtype - data type\n* @param {Collection} buffer - data buffer\n* @param {NonNegativeIntegerArray} shape - array shape\n* @param {IntegerArray} strides - array strides\n* @param {NonNegativeInteger} offset - index offset\n* @param {string} order - specifies whether an array is row-major (C-style) or column-major (Fortran-style)\n* @param {Options} [options] - function options\n* @param {string} [options.mode=\"throw\"] - specifies how to handle indices which exceed array dimensions\n* @param {StringArray} [options.submode=[\"throw\"]] - specifies how to handle subscripts which exceed array dimensions on a per dimension basis\n* @param {boolean} [options.readonly=false] - boolean indicating whether an array should be read-only\n* @throws {TypeError} `dtype` argument must be a supported ndarray data type\n* @throws {TypeError} `buffer` argument must be an array-like object, typed-array-like, or a Buffer\n* @throws {TypeError} `buffer` argument `get` and `set` properties must be functions\n* @throws {TypeError} `shape` argument must be an array-like object containing nonnegative integers\n* @throws {Error} `shape` argument length must equal the number of dimensions\n* @throws {TypeError} `strides` argument must be an array-like object containing integers\n* @throws {Error} `strides` argument length must equal the number of dimensions (except for zero-dimensional arrays; in which case, the `strides` argument length must be equal to `1`)\n* @throws {Error} for zero-dimensional ndarrays, the `strides` argument must contain a single element equal to `0`\n* @throws {TypeError} `offset` argument must be a nonnegative integer\n* @throws {TypeError} `order` argument must be a supported ndarray order\n* @throws {Error} `buffer` argument must be compatible with specified meta data\n* @throws {TypeError} options argument must be an object\n* @throws {TypeError} must provide valid options\n* @throws {RangeError} too many dimensions\n* @returns {FancyArray} FancyArray instance\n*\n* @example\n* var buffer = [ 1.0, 2.0, 3.0, 4.0, 5.0, 6.0 ];\n* var shape = [ 3, 2 ];\n* var strides = [ 2, 1 ];\n* var offset = 0;\n*\n* var out = new FancyArray( 'generic', buffer, shape, strides, offset, 'row-major' );\n* // returns <FancyArray>\n*/\nfunction FancyArray( dtype, buffer, shape, strides, offset, order, options ) {\n\tvar handlers;\n\tvar nargs;\n\tvar ndims;\n\n\tnargs = arguments.length;\n\tif ( !( this instanceof FancyArray ) ) {\n\t\tif ( nargs < 7 ) {\n\t\t\treturn new FancyArray( dtype, buffer, shape, strides, offset, order );\n\t\t}\n\t\treturn new FancyArray( dtype, buffer, shape, strides, offset, order, options );\n\t}\n\t// Call the parent constructor:\n\tparent.call( this, dtype, buffer, shape, strides, offset, order, ( nargs < 7 ) ? {} : options );\n\n\tif ( Proxy ) { // NOTE: cannot use `@stdlib/assert/has-proxy-support` here, as that API uses code evaluation and might violate CSPs\n\t\tndims = shape.length;\n\t\thandlers = {};\n\t\tif ( ndims === 0 ) {\n\t\t\thandlers.get = get0d;\n\t\t} else if ( ndims === 1 ) {\n\t\t\thandlers.get = get1d;\n\t\t} else {\n\t\t\thandlers.get = getnd;\n\t\t}\n\t\treturn new Proxy( this, handlers );\n\t}\n\t// TODO: replace with `@stdlib/console/warn` (or equivalent once available)\n\tconsole.warn( 'WARNING: Proxy objects are not supported in the current environment. Some `FancyArray` functionality may not be available.' ); // eslint-disable-line no-console\n\treturn this;\n}\n\n// Inherit from the parent constructor:\ninherit( FancyArray, parent );\n\n/**\n* Constructor name.\n*\n* @name name\n* @memberof FancyArray\n* @type {string}\n* @default 'ndarray'\n*\n* @example\n* var str = FancyArray.name;\n* // returns 'ndarray'\n*/\nsetReadOnly( FancyArray, 'name', 'ndarray' );\n\n\n// EXPORTS //\n\nexport default FancyArray;\n"],"names":["hasProperty","contains","propertiesIn","ndarray","defaults","get","RE_INTEGER","target","property","receiver","dtype","value","prop","ch","sh","s","isFunction","args","i","arguments","length","push","apply","this","trim","shape","str2multislice","Error","format","ndims","RangeError","join","test","constructor","data","strides","offset","order","readonly","empty","ctor","zeros","buffer","sliceView","slice","start","stop","vind2bind","sliceLength","step","parts","str2slice","normalizeSlice","code","normalizeMultiSlice","parseInt","split","seq2slice","RE_SUBSEQ","sdims","ns","sliceShape","nonreducedDimensions","numel","take","sub2ind","sliceStart","out","j","sliceStrides","seq2multislice","sargs2multislice","FancyArray","options","handlers","nargs","parent","call","Proxy","get0d","get1d","getnd","console","warn","inherit","setReadOnly"],"mappings":"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"}